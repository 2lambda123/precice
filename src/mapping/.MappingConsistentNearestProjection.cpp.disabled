#include "MappingConsistentNearestProjection.hpp"
#include "query/FindClosest.hpp"

namespace precice {
namespace mapping {

tarch::logging::Log MappingConsistentNearestProjection::
  _log ( "precice::mapping::MappingConsistentNearestProjection" );

MappingConsistentNearestProjection:: MappingConsistentNearestProjection ()
:
  Mapping ( FULL, TEMPORARY ),
  _weights (),
  _hasComputedMapping ( false )
{}

void MappingConsistentNearestProjection:: computeMapping ()
{
  preciceTrace ( "computeMapping()" );
  _weights.resize ( output()->vertices().size() );

  for ( size_t i=0; i < output()->vertices().size(); i++ ) {
    query::FindClosest findClosest ( output()->vertices()[i].getCoords() );
    findClosest ( *input() );
    assertion ( findClosest.hasFound() );
    const query::ClosestElement& closest = findClosest.getClosest ();
    _weights[i].clear ();
    foreach ( const query::InterpolationElement & elem, closest.interpolationElements ) {
      _weights[i].push_back ( elem );
    }
  }
  _hasComputedMapping = true;
}

bool MappingConsistentNearestProjection:: hasComputedMapping ()
{
  return _hasComputedMapping;
}

void MappingConsistentNearestProjection:: map
(
  int inputDataID,
  int outputDataID )
{
  preciceTrace2 ( "map()", inputDataID, outputDataID );
  assertion ( _weights.size() == output()->vertices().size() );
  mesh::PtrData inData = input()->data ( inputDataID );
  mesh::PtrData outData = output()->data ( outputDataID );
  const utils::DynVector& inValues = inData->values();
  utils::DynVector& outValues = outData->values();
  int dimensions = inData->getDimensions();
  assertion ( dimensions == outData->getDimensions() );
  for ( size_t i=0; i < output()->vertices().size(); i++ ) {
    InterpolationElements& elems = _weights[i];
    size_t outOffset = i * dimensions;
    foreach ( query::InterpolationElement& elem, elems ) {
      size_t inOffset = (size_t)elem.element->getID() * dimensions;
      for ( int dim=0; dim < dimensions; dim++ ) {
        assertion ( outOffset + dim < (size_t)outValues.size() );
        assertion ( inOffset + dim < (size_t)inValues.size() );
        outValues[outOffset + dim] += elem.weight * inValues[inOffset + dim];
      }
    }
  }
}

}} // namespace precice, mapping
