#ifndef PRECICE_COM_DUMMYCOMMUNICATION_HPP_
#define PRECICE_COM_DUMMYCOMMUNICATION_HPP_

#include "ICommunication.hpp"

namespace precice {
namespace com {

class DummyCommunication: public ICommunication {
public:
  DummyCommunication ();

  virtual ~DummyCommunication ();

  bool isConnected ();

   /**
    * @brief Connects to another participant, which has to call requestConnection().
    *
    * @param nameAcceptor [IN] Name of calling participant.
    * @param nameRequester [IN] Name of remote participant to connect to.
    */
   void acceptConnection (
      const std::string & nameAcceptor,
      const std::string & nameRequester );

   /**
    * @brief Connects to another participant, which has to call acceptConnection().
    *
    * @param nameAcceptor [IN] Name of remote participant to connect to.
    * @param nameReuester [IN] Name of calling participant.
    */
   void requestConnection (
      const std::string & nameAcceptor,
      const std::string & nameRequester );

   /**
    * @brief Disconnects from communication space, i.e. participant.
    *
    * This method is called on destruction.
    */
   void closeConnection ();

   /**
    * @brief Sends a std::string to process with given rank.
    */
   void send (
      const std::string & itemToSend,
      int                 rankReceiver );

   /**
    * @brief Sends a utils::Vector to process with given rank.
    */
   void send (
      const utils::Vector & itemToSend,
      int                   rankReceiver );

   /**
    * @brief Sends a mesh::Data::Values to process with given rank.
    */
   void send (
      mesh::Data::Values & itemToSend,
      int                  rankReceiver );

   /**
    * @brief Sends a double to process with given rank.
    */
   void send (
      double itemToSend,
      int    rankReceiver );

   /**
    * @brief Sends an int to process with given rank.
    */
   void send (
      int itemToSend,
      int rankReceiver );

   /**
    * @brief Sends a bool to process with given rank.
    */
   void send (
      bool itemToSend,
      int  rankReceiver );

   /**
    * @brief Receives a std::string from process with given rank.
    */
   void receive (
      std::string & itemToReceive,
      int           rankSender );

   /**
    * @brief Receives a utils::Vector from process with given rank.
    */
   void receive (
      utils::Vector & itemToReceive,
      int             rankSender );

   /**
    * @brief Receives a mesh::Data::Values from process with given rank.
    */
   void receive (
      mesh::Data::Values & itemToReceive,
      int                  rankSender );

   /**
    * @brief Receives a double from process with given rank.
    */
   void receive (
      double & itemToReceive,
      int      rankSender );

   /**
    * @brief Receives an int from process with given rank.
    */
   void receive (
      int & itemToReceive,
      int   rankSender );

   /**
    * @brief Receives a bool from process with given rank.
    */
   void receive (
      bool & itemToReceive,
      int    rankSender );

   void sendreceive (
      const utils::Vector & itemToSend,
      int                   rankReceiver,
      utils::Vector       & itemToReceive,
      int                   rankSender );

   void sendreceive (
      int   itemToSend,
      int   rankReceiver,
      int & itemToReceive,
      int   rankSender );
};

}} // // namespace precice, com

#endif /* PRECICE_COM_DUMMYCOMMUNICATION_HPP_ */
