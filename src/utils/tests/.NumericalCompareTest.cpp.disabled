#include "NumericalCompareTest.hpp"
#include "../NumericalCompare.hpp"
#include "../Helpers.hpp"
#include "../Parallel.hpp"

namespace precice {
namespace utils {
namespace tests {

using utils::Vector;

tarch::logging::Log NumericalCompareTest::
   _log ( "utils::tests::NumericalCompareTest" );

NumericalCompareTest:: NumericalCompareTest()
:
   TestCase ("utils::tests::NumericalCompareTest")
{}

void NumericalCompareTest:: run ()
{
   PRECICE_MASTER_ONLY {
      testNumericalGreaterThanEquals ();
      testNumericalGreaterThan ();
      testDNumericalEquals ();
      testDNumericalAllGreaterThan ();
      testDNumericalOneGreaterThan ();
      testDNumericalOneGreaterThanEquals ();
   }
}


void NumericalCompareTest:: testNumericalGreaterThanEquals ()
{
   _log.debug ("testNumericalGreaterThanEquals", "entering");

   double a, b;
   a = 2.0;
   b = 1.0;
   validate (greaterThanEquals(a, b), "testNumericalGreaterThanEquals");
   b = 2.0;
   validate (greaterThanEquals(a, b), "testNumericalGreaterThanEquals");
   b = 2.0 + (tarch::la::NUMERICAL_ZERO_DIFFERENCE / 10.0);
   validate (greaterThanEquals(a, b), "testNumericalGreaterThanEquals");
   b = (2.0 + tarch::la::NUMERICAL_ZERO_DIFFERENCE) * 10;
   validate (! greaterThanEquals(a, b), "testNumericalGreaterThanEquals");
   b = 2.0 - tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate (greaterThanEquals(a, b), "testNumericalGreaterThanEquals");

   _log.debug ("testNumericalGreaterThanEquals", "entering");
}

void NumericalCompareTest:: testNumericalGreaterThan ()
{
   preciceDebug ( "testNumericalGreaterThan", "Entering" );

   double a = 5.0;
   double b = 5.0;
   validate ( ! greaterThan(a, b), "testNumericalGreaterThan" );

   double c = 10.0;
   validate ( ! greaterThan(a, c), "testNumericalGreaterThan" );
   validate ( greaterThan(c, a), "testNumericalGreaterThan" );

   double d = 5.0 + 2.0 * tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate ( ! greaterThan(a, d), "testNumericalGreaterThan" );
   validate ( greaterThan(d, a), "testNumericalGreaterThan" );

   double e = 5.0 + tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate ( ! greaterThan(a, e), "testNumericalGreaterThan" );
   // greaterThan(e, a) is undefined !!!

   double f = 5.0 + 0.5 * tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate ( ! greaterThan(a, f), "testNumericalGreaterThan" );
   validate ( ! greaterThan(f, a), "testNumericalGreaterThan" );

   preciceDebug ( "testNumericalGreaterThan", "Leaving" );
}

//void NumericalCompareTest:: testDEquals ()
//{
//   _log.debug ("testDEquals", "entering");
//
//   Vector a;
//   Vector b;
//   for (int i=0; i < Def::DIM; i++) {
//      a(i) = (double)i;
//      b(i) = a(i);
//   }
//   validate ( dEquals(a, b), "testDEquals" );
//   b(0) += 1.0;
//   validate ( ! dEquals(a, b), "testDEquals" );
//
//   _log.debug ("testDEquals", "leaving");
//}

void NumericalCompareTest:: testDNumericalEquals ()
{
   _log.debug ("testDNumericalEquals()", "entering");

   Vector a, b;
   for (int i=0; i < Def::DIM; i++) {
      a(i) = (double)i;
      b(i) = a(i) + std::pow(-1.0, i) * tarch::la::NUMERICAL_ZERO_DIFFERENCE * 0.1;
   }
   validate ( dEquals(a, b), "testDNumericalEquals" );
   b(0) += tarch::la::NUMERICAL_ZERO_DIFFERENCE * 10;
   validate ( ! dEquals(a, b), "testDNumericalEquals" );

   _log.debug ("testDNumericalEquals()", "leaving");
}

//void NumericalCompareTest:: testDAllGreaterThan ()
//{
//   _log.debug ("testDAllGreaterThan()", "entering");
//
//   Vector a, b;
//   for (int i=0; i < Def::DIM; i++) {
//      a(i) = (double)i;
//      b(i) = a(i) - 1.0;
//   }
//   validate (dAllGreaterThan(a, b), "testDAllGreaterThan");
//   b(0) = a(0);
//   validate (! dAllGreaterThan(a, b), "testDAllGreaterThan");
//
//   _log.debug ("testDAllGreaterThan()", "leaving");
//}

void NumericalCompareTest:: testDNumericalAllGreaterThan ()
{
   _log.debug ("testDNumericalAllGreaterThan()", "entering");

   Vector a, b;
   for (int i=0; i < Def::DIM; i++) {
      a(i) = (double)i;
      b(i) = a(i) - 1.0;
   }
   validate (dAllGreaterThan(a, b), "testDNumericalAllGreaterThan");
   b(0) = a(0);
   validate (! dAllGreaterThan(a, b), "testDNumericalAllGreaterThan");
   b(0) = a(0) - tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate (! dAllGreaterThan(a, b), "testDNumericalAllGreaterThan");

   _log.debug ("testDNumericalAllGreaterThan()", "leaving");
}

//void NumericalCompareTest:: testDOneGreaterThan ()
//{
//   _log.debug ("testDOneGreaterThan()", "entering");
//
//   Vector a, b;
//   for (int i=0; i < Def::DIM; i++) {
//      a(i) = (double)i;
//      b(i) = a(i) + 1.0;
//   }
//   validate (! dOneGreaterThan(a, b), "testDOneGreaterThan");
//   b(0) = a(0);
//   validate (! dOneGreaterThan(a, b), "testDOneGreaterThan");
//   b(0) = a(0) - 1.0;
//   validate (dOneGreaterThan(a, b), "testDOneGreaterThan");
//
//   _log.debug ("testDOneGreaterThan()", "leaving");
//}

void NumericalCompareTest:: testDNumericalOneGreaterThan ()
{
  preciceTrace ( "testDNumericalOneGreaterThan()" );
  Vector a, b;
  for (int i=0; i < Def::DIM; i++) {
    a(i) = (double)i;
    b(i) = a(i) + 1.0;
  }
  validate (! dOneGreaterThan(a, b), "testDNumericalOneGreaterThan");
  b(0) = a(0) + tarch::la::NUMERICAL_ZERO_DIFFERENCE;
  validate (! dOneGreaterThan(a, b), "testDNumericalOneGreaterThan");
  b(0) = a(0) - tarch::la::NUMERICAL_ZERO_DIFFERENCE;
  validate (! dOneGreaterThan(a, b), "testDNumericalOneGreaterThan");
  b(0) = a(0);
  validate (! dOneGreaterThan(a, b), "testDNumericalOneGreaterThan");
  b(0) = a(0) - (10.0 * tarch::la::NUMERICAL_ZERO_DIFFERENCE);
  validate (dOneGreaterThan(a, b), "testDNumericalOneGreaterThan");
}

//void NumericalCompareTest:: testDOneGreaterThanEquals ()
//{
//   _log.debug ("testDOneGreaterThanEquals()", "entering");
//
//   Vector a, b;
//   for (int i=0; i < Def::DIM; i++) {
//      a(i) = (double)i;
//      b(i) = a(i) + 1.0;
//   }
//   validate (! dOneGreaterThanEquals(a, b), "testDOneGreaterThanEquals");
//   b(0) = a(0);
//   validate (dOneGreaterThanEquals(a, b), "testDOneGreaterThanEquals");
//   b(0) = a(0) - 1.0;
//   validate (dOneGreaterThanEquals(a, b), "testDOneGreaterThanEquals");
//
//   _log.debug ("testDOneGreaterThanEquals()", "leaving");
//}

void NumericalCompareTest:: testDNumericalOneGreaterThanEquals ()
{
   _log.debug ("testDNumericalOneGreaterThanEquals()", "entering");

   Vector a, b;
   for (int i=0; i < Def::DIM; i++) {
      a(i) = (double)i;
      b(i) = a(i) + 1.0;
   }
   validate (! dOneGreaterThanEquals(a, b),
             "testDNumericalOneGreaterThanEquals");
   b(0) = a(0) + tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate (dOneGreaterThanEquals(a, b),
             "testDNumericalOneGreaterThanEquals");
   b(0) = a(0) - tarch::la::NUMERICAL_ZERO_DIFFERENCE;
   validate (dOneGreaterThanEquals(a, b),
             "testDNumericalOneGreaterThanEquals");
   b(0) = a(0);
   validate (dOneGreaterThanEquals(a, b),
             "testDNumericalOneGreaterThanEquals");
   b(0) = a(0) - 1.0;
   validate (dOneGreaterThanEquals(a, b),
             "testDNumericalOneGreaterThanEquals");

   _log.debug ("testDNumericalOneGreaterThanEquals()", "leaving");
}

}}} // namespace precice, utils, tests
