#ifndef PRECICE_UTILS_XMLATTRIBUTE_CPPH_
#define PRECICE_UTILS_XMLATTRIBUTE_CPPH_

using utils::Vector;


template< typename value_t >
tarch::logging::Log XMLAttribute<value_t>:: _log ("precice::utils::XMLAttribute");

template< typename value_t >
XMLAttribute<value_t>:: XMLAttribute
(
   std::string name )
:
   _name (name),
   _read (false),
   _value (),
   _hasDefaultValue (false),
   _defaultValue (),
   _validator (NULL)
{}

template< typename value_t >
XMLAttribute<value_t>:: XMLAttribute
(
   const XMLAttribute<value_t> & rhs )
:
   _name (rhs._name),
   _read (rhs._read),
   _value (rhs._value),
   _hasDefaultValue (rhs._hasDefaultValue),
   _defaultValue (rhs._defaultValue)
{
   if (rhs._validator != NULL) {
      _validator = &((rhs._validator)->clone());
   }
   else {
      _validator = NULL;
   }
}

template< typename value_t >
void XMLAttribute<value_t>:: setValidator
(
   const Validator<value_t> & validator )
{
   if (_validator) {
      delete _validator;
   }
   _validator = &(validator.clone());
}


template< typename value_t >
void XMLAttribute<value_t>:: setDefaultValue
(
   value_t defaultValue )
{
   _hasDefaultValue = true;
   _defaultValue = defaultValue;
}

template< typename value_t >
bool XMLAttribute<value_t>:: readValue
(
   tarch::irr::io::IrrXMLReader * xmlReader,
   std::string             tagName )
{
  preciceTrace ( "readValue()" );
  if (xmlReader->getAttributeValue(getName().c_str()) == 0) {
    if (_hasDefaultValue ) {
      _value = _defaultValue;
    }
    else {
      preciceError ( "readValue()", "Attribute " << getName()
                     << " missing in tag <" << tagName << "> !" );
    }
  }
  else {
    readValueSpecific (_value, xmlReader);
    if (_validator) {
      if (! _validator->validateValue(_value)) {
        preciceError ( "readValue()", "Invalid value \"" << _value
                       << "\" of attribute \"" << getName() << "\" in tag <"
                       << tagName << "> : " << _validator->getErrorMessage() );
      }
    }
  }
  preciceDebug ( getName() << "=" << _value );
  _read = true;
  return true;
}

template< typename value_t >
void XMLAttribute<value_t>:: readValueSpecific
(
   double                & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = xmlReader->getAttributeValueAsDouble (_name.c_str());
}

template< typename value_t >
void XMLAttribute<value_t>:: readValueSpecific
(
   int                   & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = xmlReader->getAttributeValueAsInt (_name.c_str());
}

template< typename value_t >
void XMLAttribute<value_t>:: readValueSpecific
(
   std::string           & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = std::string(xmlReader->getAttributeValue (_name.c_str()));
}

template< typename value_t >
void XMLAttribute<value_t>:: readValueSpecific
(
   bool                  & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = xmlReader->getAttributeValueAsBool ( _name.c_str() );
}


template< typename value_t >
tarch::logging::Log XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >::
   _log ("precice::utils::XMLAttribute<Vector>");

template< typename value_t >
XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: XMLAttribute
(
   std::string name )
:
   _name (name),
   _read (false),
   _value (),
   _hasDefaultValue (false),
   _defaultValue (),
   _validator (NULL)
{}

template< typename value_t >
XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: XMLAttribute
(
   const XMLAttribute< tarch::la::Vector<Def::DIM,value_t> > & rhs )
:
   _name (rhs._name),
   _read (rhs._read),
   _value (rhs._value),
   _hasDefaultValue (rhs._hasDefaultValue),
   _defaultValue (rhs._defaultValue)
{
   if (rhs._validator != NULL)
      _validator = &((rhs._validator)->clone());
   else
      _validator = NULL;
}

template< typename value_t >
void XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: setValidator
(
   const Validator< tarch::la::Vector<Def::DIM,value_t> > & validator )
{
   if (_validator) {
      delete _validator;
   }
   _validator = &(validator.clone());
}

template< typename value_t >
void XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: setDefaultValue
(
  tarch::la::Vector<Def::DIM,value_t> defaultValue )
{
  _hasDefaultValue = true;
  _defaultValue = defaultValue;
}

template< typename value_t >
bool XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: readValue
(
  tarch::irr::io::IrrXMLReader * xmlReader,
  std::string                    tagName )
{
  preciceTrace1 ( "readValue()", tagName );
  for (int dim=0; dim < Def::DIM; dim++) {
    std::ostringstream streamName;
    streamName << getName() << dim;
    if (xmlReader->getAttributeValue(streamName.str().c_str()) == 0) {
      if (_hasDefaultValue ) {
        _value(dim) = _defaultValue(dim);
      }
      else {
        preciceError ( "readValue()", "Attribute " << getName() << dim
                       << " missing in tag <" << tagName << "> !" );
      }
    }
    else {
      std::string tempName = getName();
      _name = streamName.str();
      readValueSpecific (_value(dim), xmlReader);
      _name = tempName;
    }
    preciceDebug ( getName() << " = " << _value(dim) );
  }

  if (_validator) {
    if (! _validator->validateValue(_value)) {
      preciceError ( "readValue()", "Invalid value \"" << _value
                     << "\" of attribute \"" << getName() << "\" in tag <"
                     << tagName << "> : " << _validator->getErrorMessage() );
    }
  }
  _read = true;
  return true;
}

template< typename value_t >
void XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: readValueSpecific
(
   double                & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = xmlReader->getAttributeValueAsDouble (_name.c_str());
}

template< typename value_t >
void XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: readValueSpecific
(
   int                   & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = xmlReader->getAttributeValueAsInt (_name.c_str());
}

template< typename value_t >
void XMLAttribute< tarch::la::Vector<Def::DIM,value_t> >:: readValueSpecific
(
   std::string           & value,
   tarch::irr::io::IrrXMLReader * xmlReader )
{
   value = std::string(xmlReader->getAttributeValue (_name.c_str()));
}

#endif /* PRECICE_UTILS_XMLATTRIBUTE_CPPH_ */
