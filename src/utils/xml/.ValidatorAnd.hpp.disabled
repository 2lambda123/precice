#ifndef PRECICE_UTILS_VALIDATORAND_HPP_
#define PRECICE_UTILS_VALIDATORAND_HPP_

#include "Validator.hpp"

namespace precice {
namespace utils {

template< typename value_t >
class ValidatorAnd;

template< typename value_t >
const Validator<value_t> & operator&& ( const Validator<value_t> & lhs,
                                        const Validator<value_t> & rhs )
{
   ValidatorAnd<value_t> * validator = new ValidatorAnd<value_t> (lhs, rhs);
   return *validator;
}



template< typename value_t >
class ValidatorAnd
:
   public Validator<value_t>
{
public:

   ValidatorAnd ( const Validator<value_t> & lhs,
                  const Validator<value_t> & rhs );

   virtual ~ValidatorAnd() { delete _lhs; delete _rhs; };

   virtual bool validateValue ( value_t value );

   virtual Validator<value_t> & clone () const;

   virtual std::string getErrorMessage () const;

private:

   Validator<value_t> * _lhs;

   Validator<value_t> * _rhs;
};

#include "ValidatorAnd.cpph"

}} // namespace precice, utils

#endif /* PRECICE_UTILS_VALIDATORAND_HPP_ */
