#ifndef PRECICE_UTILS_VALIDATORUNIQUEVALUE_CPPH_
#define PRECICE_UTILS_VALIDATORUNIQUEVALUE_CPPH_


template< typename value_t >
tarch::logging::Log ValidatorUniqueValue<value_t>:: _log ("precice::utils::ValidatorUniqueValue");

template< typename value_t >
ValidatorUniqueValue<value_t>:: ValidatorUniqueValue ()
:
   Validator<value_t> ()
{}

template< typename value_t >
bool ValidatorUniqueValue<value_t>:: validateValue ( value_t value )
{
   if (_readValues.count(value) == 0) {
      _readValues.insert (value);
      return true;
   }
   else {
      return false;
   }
}

template< typename value_t >
Validator<value_t> & ValidatorUniqueValue<value_t>:: clone () const
{
   ValidatorUniqueValue<value_t> * validator =
      new ValidatorUniqueValue<value_t> ( );
   validator->_readValues = _readValues;
   return *validator;
}

template< typename value_t >
std::string ValidatorUniqueValue<value_t>:: getErrorMessage () const
{
   return std::string("Value must be unique in all tag instances!");
}

#endif /* PRECICE_UTILS_VALIDATORUNIQUEVALUE_CPPH_ */
