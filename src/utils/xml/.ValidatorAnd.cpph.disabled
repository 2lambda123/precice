#ifndef PRECICE_UTILS_VALIDATORAND_CPPH_
#define PRECICE_UTILS_VALIDATORAND_CPPH_

template< typename value_t >
precice::utils::ValidatorAnd<value_t>:: ValidatorAnd
(
   const Validator<value_t> & lhs,
   const Validator<value_t> & rhs )
{
   _lhs = &lhs.clone();
   _rhs = &rhs.clone();
}

template< typename value_t >
bool precice::utils::ValidatorAnd<value_t>:: validateValue ( value_t value )
{
   return _lhs->validateValue(value) && _rhs->validateValue(value);
}

template< typename value_t >
precice::utils::Validator<value_t> &
precice::utils::ValidatorAnd<value_t>:: clone () const
{
   Validator<value_t> * validator = new ValidatorAnd<value_t> (*_lhs, *_rhs);
   return *validator;
}

template< typename value_t >
std::string precice::utils::ValidatorAnd<value_t>:: getErrorMessage () const
{
   return _lhs->getErrorMessage() + " AND " + _rhs->getErrorMessage();
}


#endif /* PRECICE_UTILS_VALIDATORAND_CPPH_ */
