#ifndef PRECICE_UTILS_XMLTAG_CPPH_
#define PRECICE_UTILS_XMLTAG_CPPH_

#include "utils/Globals.hpp"

template<typename CALLBACK_T>
bool precice::utils::XMLTag:: parse
(
  tarch::irr::io::IrrXMLReader * xmlReader,
  callback_t            & callback )
{
  preciceTrace ( "parse()" );
  if (xmlReader->getNodeType() == tarch::irr::io::EXN_ELEMENT) {
    assertion ( xmlReader->getNodeName() != NULL );
    preciceDebug ( "reading attributes of tag " << *xmlReader->getNodeName() );
    if (! readAttributes (xmlReader)) {
      return false;
    }
    if (! callback.xmlTagCallback (*this, xmlReader)) {
      return false;
    }
    resetAttributes ();
  }

  if ( (_subtags.size() > 0) ||
      (_Occurrence == OCCUR_ARBITRARY_NESTED) )
  {
    while (xmlReader->read()) {
      if (xmlReader->getNodeType() == tarch::irr::io::EXN_ELEMENT) {
        assertion ( xmlReader->getNodeName() != NULL );
        preciceDebug ( "reading subtag " << *xmlReader->getNodeName()
                       << " of tag " << getName() );
        if ( (_Occurrence == OCCUR_ARBITRARY_NESTED) &&
            (std::string(xmlReader->getNodeName()) == _name) )
        {
          resetAttributes ();
          addSubtag ( *this );
        }
        if (! configureSubtag (xmlReader, callback)) {
          return false;
        }
      }
      else if ( xmlReader->getNodeType() == tarch::irr::io::EXN_ELEMENT_END ) {
        if ( std::string(xmlReader->getNodeName()) == _name ) {
          preciceDebug ( "end of tag " << xmlReader->getNodeName() );
          _configured = true;
          _configured &= areAllSubtagsConfigured ();
          _configured &= callback.xmlEndTagCallback ( *this, xmlReader );
          return _configured;
        }
        else {
          preciceError ( "parse()", "Found closing tag for tag <"
            << xmlReader->getNodeName()
            << ">, but expected it for tag <" << getName() << "> !");
          return false;
        }
      }
    }
  }

  _configured = true;
  return true;
}

template< typename callback_t >
bool precice::utils::XMLTag:: configureSubtag
(
   tarch::irr::io::IrrXMLReader * xmlReader,
   callback_t            & callback )
{
   foreach ( XMLTag * tag, _subtags) {
      if (std::string(xmlReader->getNodeName()) == tag->getName()) {
         if ( tag->isConfigured() &&
              (tag->getOccurrence() == OCCUR_ONCE ||
               tag->getOccurrence() == OCCUR_NOT_OR_ONCE) )
         {
            preciceError ( "configureSubtag()", "Tag <" << tag->getName()
                           << "> can be defined only once!" );
            return false;
         }
         //_log.debug ("configureSubtag(.)", "calling autoconfigure for tag " + tagIter->getName());
         if (! tag->parse(xmlReader, callback)) {
            return false;
         }
         break;   // since the xmlReader is not advanced here
      }
   }
   return true;
}

#endif /* PRECICE_UTILS_XMLTAG_CPPH_ */
