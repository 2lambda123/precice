#include "ClientServerHelper.hpp"

namespace precice {
namespace impl {



ClientServerHelper::ClientServerHelper() {
   // TODO_ZANDERN Auto-generated constructor stub

}

ClientServerHelper::~ClientServerHelper() {
   // TODO_ZANDERN Auto-generated destructor stub
}

double* ClientServerHelper::covertVectorToDouble_disabled(std::vector<Vector> vectorList)
{
   // 1. get dimensions of utils::Vetcor
   int dim = utils::Def::DIM;

   // 2. allocate a double array of dim*size of list
   double *buffer = (double*) calloc(dim*vectorList.size(), sizeof(double));

   // 3. copy the elements of vectorlist into double buffer
   for ( size_t i=0; i < vectorList.size(); i++ )
   {
      for(int d = 0; d < dim; d++)
      {
         buffer[ i*dim + d ] = vectorList[i].data()[d];
      }
   }

   // 4. give back the buffer
   return buffer;
}

ptr_vector<Vector> ClientServerHelper::
         covertDoubleToVector_disabled(const double* doubleList, int size)
{
   // 1. get dimensions of utils::Vetcor
   int dim = utils::Def::DIM;

   // 2. create new Vector list
   ptr_vector<Vector> VectorBuffer;

   // 3. copy the elements of doubleList into Vector buffer
   for ( int i=0; i < size; i++ )
   {
      Vector tmpVector;
      for(int d = 0; d < dim; d++)
      {
         tmpVector[d] = doubleList[ i*dim + d ];
      }
      // TODO_ZANDERN does this work
      VectorBuffer.push_back(&tmpVector);
   }

   // 4. give back buffer (as copy)
   return VectorBuffer;
}

void ClientServerHelper::sendVectorList_disabled(std::vector<Vector> vectorList,
                    com::PtrICommunication communication, int rank)
{
   // 1. convert coordinates to double
   double *buffer = covertVectorToDouble_disabled(vectorList);

   // 2. send buffer
   // TODO_ZANDERN extend for sending of complete lists
   communication->send(*buffer, rank);

   // 3. clean up
   free(buffer);
}

ptr_vector<Vector> ClientServerHelper::receiveVectorList_disabled
(com::PtrICommunication communication, int rank, int noElements)
{
   // 1. get no dimensions
   int dim = utils::Def::DIM;

   // 2. allocate the required memory for message buffering
   double *buffer = (double*) calloc(noElements*dim, sizeof(double));

   // 3. receive the list
   // TODO_ZANDERN extend for receiving of complete lists
   communication->receive(*buffer, rank);

   // 4. convert to vector list
   ptr_vector<Vector> vectorList =
         covertDoubleToVector_disabled(buffer, noElements*dim);

   // 5. clean up
   free(buffer);

   // 6. return received list
   return vectorList;
}


}
}
