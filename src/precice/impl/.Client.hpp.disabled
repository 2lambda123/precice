
#ifndef PRECICE_IMPL_CLIENT_HPP_
#define PRECICE_IMPL_CLIENT_HPP_

#include <vector>

#include "com/SharedPointer.hpp"
#include "com/ICommunication.hpp"
#include "SharedPointer.hpp"
//#include "AbstractRequest.hpp"

namespace precice {
namespace impl {

class Client
{
public:
   // @brief request which has to be performed for client by server
//         PtrAbstractRequest _abstractRequest;

   /*
      * @brief Constructor
     */
   Client();

   /*
    * @brief Constructor
   */
   Client(int rank, com::PtrICommunication communication);

   /*
    * @brief Destructor
   */
   virtual ~Client();

   /*
    * @brief get MPI Rank of client
   */
   int getRank();

   /*
    * @brief get information whether client is ready to advance
   */
   bool getAdvance();

   /*
    * @brief set the advance status
   */
   void setAdvance(bool state);

   /*
    * @brief get communication object (TODO check whether save)
   */
   const com::PtrICommunication getCommmunication();

   void addUsedMesh(std::string name);

private:
   // @brief communication object for client
   com::PtrICommunication _communication;

   // TODO How to get the rank of the client from ICommunictaion object
   // @brief MPI Rank of client
   int _rank;

   // @brief states whether client is ready to advance to next time step
   bool _advance;

   // @brief list of meshes that the client might access
   std::vector<std::string> _usedMeshes;
};
}  // namespace impl
}  // namespace precice


#endif /* CLIENT_HPP_ */
