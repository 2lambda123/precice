/* Generated by Cython 0.27.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PySolverInterface
#define __PYX_HAVE_API__PySolverInterface
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include <stdlib.h>
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <set>
#include <memory>
#include <string>
#include <vector>
#include "./src/precice/Constants.hpp"
#include "./src/cplscheme/Constants.hpp"
#include "./src/io/Constants.hpp"
#include "./src/precice/SolverInterface.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PySolverInterface.pyx",
  "stringsource",
  "PyConstants.pyx",
  "array.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_17PySolverInterface_PySolverInterface;

/* "PySolverInterface.pyx":91
 * 
 * 
 * cdef class PySolverInterface:             # <<<<<<<<<<<<<<
 *    cdef SolverInterface *thisptr # hold a C++ instance being wrapped
 * 
 */
struct __pyx_obj_17PySolverInterface_PySolverInterface {
  PyObject_HEAD
  precice::SolverInterface *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
#if PY_MAJOR_VERSION >= 3
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
#endif
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'PySolverInterface' */
static PyTypeObject *__pyx_ptype_17PySolverInterface_PySolverInterface = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_set_to_py_int(std::set<int>  const &); /*proto*/
#define __Pyx_MODULE_NAME "PySolverInterface"
extern int __pyx_module_is_main_PySolverInterface;
int __pyx_module_is_main_PySolverInterface = 0;

/* Implementation of 'PySolverInterface' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_dataID[] = "dataID";
static const char __pyx_k_meshID[] = "meshID";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_dataName[] = "dataName";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_positions[] = "positions";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_solverName[] = "solverName";
static const char __pyx_k_valueIndex[] = "valueIndex";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PyExportAll[] = "PyExportAll";
static const char __pyx_k_PyExportVTK[] = "PyExportVTK";
static const char __pyx_k_firstEdgeID[] = "firstEdgeID";
static const char __pyx_k_thirdEdgeID[] = "thirdEdgeID";
static const char __pyx_k_PyDataForces[] = "PyDataForces";
static const char __pyx_k_PyExportVRML[] = "PyExportVRML";
static const char __pyx_k_fourthEdgeID[] = "fourthEdgeID";
static const char __pyx_k_secondEdgeID[] = "secondEdgeID";
static const char __pyx_k_valueIndices[] = "valueIndices";
static const char __pyx_k_firstVertexID[] = "firstVertexID";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_thirdVertexID[] = "thirdVertexID";
static const char __pyx_k_fourthVertexID[] = "fourthVertexID";
static const char __pyx_k_secondVertexID[] = "secondVertexID";
static const char __pyx_k_PyConstants_pyx[] = "PyConstants.pyx";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyDataVelocities[] = "PyDataVelocities";
static const char __pyx_k_PySolverInterface[] = "PySolverInterface";
static const char __pyx_k_solverProcessSize[] = "solverProcessSize";
static const char __pyx_k_PyActionPlotOutput[] = "PyActionPlotOutput";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_solverProcessIndex[] = "solverProcessIndex";
static const char __pyx_k_PyDataDisplacements[] = "PyDataDisplacements";
static const char __pyx_k_PyNameConfiguration[] = "PyNameConfiguration";
static const char __pyx_k_PyActionWriteInitialData[] = "PyActionWriteInitialData";
static const char __pyx_k_PyActionReadIterationCheckpoint[] = "PyActionReadIterationCheckpoint";
static const char __pyx_k_PyActionWriteIterationCheckpoint[] = "PyActionWriteIterationCheckpoint";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_PyActionPlotOutput;
static PyObject *__pyx_n_s_PyActionReadIterationCheckpoint;
static PyObject *__pyx_n_s_PyActionWriteInitialData;
static PyObject *__pyx_n_s_PyActionWriteIterationCheckpoint;
static PyObject *__pyx_kp_s_PyConstants_pyx;
static PyObject *__pyx_n_s_PyDataDisplacements;
static PyObject *__pyx_n_s_PyDataForces;
static PyObject *__pyx_n_s_PyDataVelocities;
static PyObject *__pyx_n_s_PyExportAll;
static PyObject *__pyx_n_s_PyExportVRML;
static PyObject *__pyx_n_s_PyExportVTK;
static PyObject *__pyx_n_s_PyNameConfiguration;
static PyObject *__pyx_n_s_PySolverInterface;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_dataID;
static PyObject *__pyx_n_s_dataName;
static PyObject *__pyx_n_s_firstEdgeID;
static PyObject *__pyx_n_s_firstVertexID;
static PyObject *__pyx_n_s_fourthEdgeID;
static PyObject *__pyx_n_s_fourthVertexID;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_meshID;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_positions;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_secondEdgeID;
static PyObject *__pyx_n_s_secondVertexID;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_solverName;
static PyObject *__pyx_n_s_solverProcessIndex;
static PyObject *__pyx_n_s_solverProcessSize;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thirdEdgeID;
static PyObject *__pyx_n_s_thirdVertexID;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_valueIndex;
static PyObject *__pyx_n_s_valueIndices;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_17PySolverInterface_PyNameConfiguration(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_2PyDataDisplacements(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_4PyDataForces(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_6PyDataVelocities(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_8PyActionWriteInitialData(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_10PyActionWriteIterationCheckpoint(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_12PyActionReadIterationCheckpoint(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_14PyActionPlotOutput(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_16PyExportVTK(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_18PyExportVRML(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_20PyExportAll(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_17PySolverInterface_17PySolverInterface___cinit__(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, std::string __pyx_v_solverName, int __pyx_v_solverProcessIndex, int __pyx_v_solverProcessSize); /* proto */
static void __pyx_pf_17PySolverInterface_17PySolverInterface_2__dealloc__(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_4configure(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, std::string __pyx_v_configurationFileName); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_6initialize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_8initializeData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_10advance(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, double __pyx_v_computedTimestepLength); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_12finalize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_14getDimensions(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_16isCouplingOngoing(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_18isReadDataAvailable(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_20isWriteDataRequired(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, double __pyx_v_computedTimestepLength); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_22isTimestepComplete(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_24isActionRequired(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_26fulfilledAction(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_28hasMesh(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshName); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_30getMeshID(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshName); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_32getMeshIDs(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_34hasData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataName, PyObject *__pyx_v_meshID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_36getDataID(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataName, PyObject *__pyx_v_meshID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_38setMeshVertices(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_size, PyObject *__pyx_v_positions, PyObject *__pyx_v_ids); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_40getMeshVertexSize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_42getMeshVertexIDsFromPositions(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_size, PyObject *__pyx_v_positions, PyObject *__pyx_v_ids); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_44setMeshEdge(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_46setMeshTriangle(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstEdgeID, PyObject *__pyx_v_secondEdgeID, PyObject *__pyx_v_thirdEdgeID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_48setMeshTriangleWithEdges(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID, PyObject *__pyx_v_thirdVertexID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_50setMeshQuad(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, int __pyx_v_meshID, PyObject *__pyx_v_firstEdgeID, PyObject *__pyx_v_secondEdgeID, PyObject *__pyx_v_thirdEdgeID, PyObject *__pyx_v_fourthEdgeID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_52setMeshQuadWithEdges(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID, PyObject *__pyx_v_thirdVertexID, PyObject *__pyx_v_fourthVertexID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_54mapReadDataTo(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_toMeshID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_56mapWriteDataFrom(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_fromMeshID); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_58writeBlockVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_60writeVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_62writeBlockScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_64writeScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_66readBlockVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_68readVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_70readBlockScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_72readScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, int __pyx_v_dataID, int __pyx_v_valueIndex, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_74__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_76__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_17PySolverInterface_PySolverInterface(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;

/* "PyConstants.pyx":44
 * #      del self.thisptr
 * 
 * def PyNameConfiguration ():             # <<<<<<<<<<<<<<
 *    return nameConfiguration()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_1PyNameConfiguration(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_1PyNameConfiguration = {"PyNameConfiguration", (PyCFunction)__pyx_pw_17PySolverInterface_1PyNameConfiguration, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_1PyNameConfiguration(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyNameConfiguration (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_PyNameConfiguration(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_PyNameConfiguration(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyNameConfiguration", 0);

  /* "PyConstants.pyx":45
 * 
 * def PyNameConfiguration ():
 *    return nameConfiguration()             # <<<<<<<<<<<<<<
 * 
 * def PyDataDisplacements ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::nameConfiguration()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":44
 * #      del self.thisptr
 * 
 * def PyNameConfiguration ():             # <<<<<<<<<<<<<<
 *    return nameConfiguration()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyNameConfiguration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":47
 *    return nameConfiguration()
 * 
 * def PyDataDisplacements ():             # <<<<<<<<<<<<<<
 *    return dataDisplacements()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_3PyDataDisplacements(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_3PyDataDisplacements = {"PyDataDisplacements", (PyCFunction)__pyx_pw_17PySolverInterface_3PyDataDisplacements, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_3PyDataDisplacements(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyDataDisplacements (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_2PyDataDisplacements(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_2PyDataDisplacements(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyDataDisplacements", 0);

  /* "PyConstants.pyx":48
 * 
 * def PyDataDisplacements ():
 *    return dataDisplacements()             # <<<<<<<<<<<<<<
 * 
 * def PyDataForces ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::dataDisplacements()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":47
 *    return nameConfiguration()
 * 
 * def PyDataDisplacements ():             # <<<<<<<<<<<<<<
 *    return dataDisplacements()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyDataDisplacements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":50
 *    return dataDisplacements()
 * 
 * def PyDataForces ():             # <<<<<<<<<<<<<<
 *    return dataForces()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_5PyDataForces(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_5PyDataForces = {"PyDataForces", (PyCFunction)__pyx_pw_17PySolverInterface_5PyDataForces, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_5PyDataForces(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyDataForces (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_4PyDataForces(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_4PyDataForces(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyDataForces", 0);

  /* "PyConstants.pyx":51
 * 
 * def PyDataForces ():
 *    return dataForces()             # <<<<<<<<<<<<<<
 * 
 * def PyDataVelocities ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::dataForces()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":50
 *    return dataDisplacements()
 * 
 * def PyDataForces ():             # <<<<<<<<<<<<<<
 *    return dataForces()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyDataForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":53
 *    return dataForces()
 * 
 * def PyDataVelocities ():             # <<<<<<<<<<<<<<
 *    return dataVelocities()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_7PyDataVelocities(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_7PyDataVelocities = {"PyDataVelocities", (PyCFunction)__pyx_pw_17PySolverInterface_7PyDataVelocities, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_7PyDataVelocities(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyDataVelocities (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_6PyDataVelocities(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_6PyDataVelocities(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyDataVelocities", 0);

  /* "PyConstants.pyx":54
 * 
 * def PyDataVelocities ():
 *    return dataVelocities()             # <<<<<<<<<<<<<<
 * 
 * def PyActionWriteInitialData ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::dataVelocities()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":53
 *    return dataForces()
 * 
 * def PyDataVelocities ():             # <<<<<<<<<<<<<<
 *    return dataVelocities()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyDataVelocities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":56
 *    return dataVelocities()
 * 
 * def PyActionWriteInitialData ():             # <<<<<<<<<<<<<<
 *    return actionWriteInitialData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_9PyActionWriteInitialData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_9PyActionWriteInitialData = {"PyActionWriteInitialData", (PyCFunction)__pyx_pw_17PySolverInterface_9PyActionWriteInitialData, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_9PyActionWriteInitialData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyActionWriteInitialData (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_8PyActionWriteInitialData(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_8PyActionWriteInitialData(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyActionWriteInitialData", 0);

  /* "PyConstants.pyx":57
 * 
 * def PyActionWriteInitialData ():
 *    return actionWriteInitialData()             # <<<<<<<<<<<<<<
 * 
 * def PyActionWriteIterationCheckpoint ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::actionWriteInitialData()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":56
 *    return dataVelocities()
 * 
 * def PyActionWriteInitialData ():             # <<<<<<<<<<<<<<
 *    return actionWriteInitialData()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyActionWriteInitialData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":59
 *    return actionWriteInitialData()
 * 
 * def PyActionWriteIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionWriteIterationCheckpoint()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_11PyActionWriteIterationCheckpoint(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_11PyActionWriteIterationCheckpoint = {"PyActionWriteIterationCheckpoint", (PyCFunction)__pyx_pw_17PySolverInterface_11PyActionWriteIterationCheckpoint, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_11PyActionWriteIterationCheckpoint(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyActionWriteIterationCheckpoint (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_10PyActionWriteIterationCheckpoint(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_10PyActionWriteIterationCheckpoint(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyActionWriteIterationCheckpoint", 0);

  /* "PyConstants.pyx":60
 * 
 * def PyActionWriteIterationCheckpoint ():
 *    return actionWriteIterationCheckpoint()             # <<<<<<<<<<<<<<
 * 
 * def PyActionReadIterationCheckpoint ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::actionWriteIterationCheckpoint()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":59
 *    return actionWriteInitialData()
 * 
 * def PyActionWriteIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionWriteIterationCheckpoint()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyActionWriteIterationCheckpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":62
 *    return actionWriteIterationCheckpoint()
 * 
 * def PyActionReadIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionReadIterationCheckpoint()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_13PyActionReadIterationCheckpoint(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_13PyActionReadIterationCheckpoint = {"PyActionReadIterationCheckpoint", (PyCFunction)__pyx_pw_17PySolverInterface_13PyActionReadIterationCheckpoint, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_13PyActionReadIterationCheckpoint(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyActionReadIterationCheckpoint (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_12PyActionReadIterationCheckpoint(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_12PyActionReadIterationCheckpoint(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyActionReadIterationCheckpoint", 0);

  /* "PyConstants.pyx":63
 * 
 * def PyActionReadIterationCheckpoint ():
 *    return actionReadIterationCheckpoint()             # <<<<<<<<<<<<<<
 * 
 * def PyActionPlotOutput ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::actionReadIterationCheckpoint()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":62
 *    return actionWriteIterationCheckpoint()
 * 
 * def PyActionReadIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionReadIterationCheckpoint()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyActionReadIterationCheckpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":65
 *    return actionReadIterationCheckpoint()
 * 
 * def PyActionPlotOutput ():             # <<<<<<<<<<<<<<
 *    return actionPlotOutput()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_15PyActionPlotOutput(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_15PyActionPlotOutput = {"PyActionPlotOutput", (PyCFunction)__pyx_pw_17PySolverInterface_15PyActionPlotOutput, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_15PyActionPlotOutput(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyActionPlotOutput (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_14PyActionPlotOutput(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_14PyActionPlotOutput(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyActionPlotOutput", 0);

  /* "PyConstants.pyx":66
 * 
 * def PyActionPlotOutput ():
 *    return actionPlotOutput()             # <<<<<<<<<<<<<<
 * 
 * def PyExportVTK ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(precice::constants::actionPlotOutput()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":65
 *    return actionReadIterationCheckpoint()
 * 
 * def PyActionPlotOutput ():             # <<<<<<<<<<<<<<
 *    return actionPlotOutput()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyActionPlotOutput", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":68
 *    return actionPlotOutput()
 * 
 * def PyExportVTK ():             # <<<<<<<<<<<<<<
 *    return exportVTK()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PyExportVTK(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_17PyExportVTK = {"PyExportVTK", (PyCFunction)__pyx_pw_17PySolverInterface_17PyExportVTK, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_17PyExportVTK(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyExportVTK (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_16PyExportVTK(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_16PyExportVTK(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyExportVTK", 0);

  /* "PyConstants.pyx":69
 * 
 * def PyExportVTK ():
 *    return exportVTK()             # <<<<<<<<<<<<<<
 * 
 * def PyExportVRML ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(precice::constants::exportVTK()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":68
 *    return actionPlotOutput()
 * 
 * def PyExportVTK ():             # <<<<<<<<<<<<<<
 *    return exportVTK()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyExportVTK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":71
 *    return exportVTK()
 * 
 * def PyExportVRML ():             # <<<<<<<<<<<<<<
 *    return exportVRML()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_19PyExportVRML(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_19PyExportVRML = {"PyExportVRML", (PyCFunction)__pyx_pw_17PySolverInterface_19PyExportVRML, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_19PyExportVRML(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyExportVRML (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_18PyExportVRML(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_18PyExportVRML(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyExportVRML", 0);

  /* "PyConstants.pyx":72
 * 
 * def PyExportVRML ():
 *    return exportVRML()             # <<<<<<<<<<<<<<
 * 
 * def PyExportAll ():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(precice::constants::exportVRML()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":71
 *    return exportVTK()
 * 
 * def PyExportVRML ():             # <<<<<<<<<<<<<<
 *    return exportVRML()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyExportVRML", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyConstants.pyx":74
 *    return exportVRML()
 * 
 * def PyExportAll ():             # <<<<<<<<<<<<<<
 *    return exportAll()
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_21PyExportAll(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_17PySolverInterface_21PyExportAll = {"PyExportAll", (PyCFunction)__pyx_pw_17PySolverInterface_21PyExportAll, METH_NOARGS, 0};
static PyObject *__pyx_pw_17PySolverInterface_21PyExportAll(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyExportAll (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_20PyExportAll(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_20PyExportAll(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyExportAll", 0);

  /* "PyConstants.pyx":75
 * 
 * def PyExportAll ():
 *    return exportAll()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(precice::constants::exportAll()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyConstants.pyx":74
 *    return exportVRML()
 * 
 * def PyExportAll ():             # <<<<<<<<<<<<<<
 *    return exportAll()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PyExportAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":95
 * 
 *    # constructor
 *    def __cinit__ (self, string solverName, int solverProcessIndex, int solverProcessSize):             # <<<<<<<<<<<<<<
 *       self.thisptr = new SolverInterface (solverName, solverProcessIndex, solverProcessSize)
 * 
 */

/* Python wrapper */
static int __pyx_pw_17PySolverInterface_17PySolverInterface_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_17PySolverInterface_17PySolverInterface_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_solverName;
  int __pyx_v_solverProcessIndex;
  int __pyx_v_solverProcessSize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_solverName,&__pyx_n_s_solverProcessIndex,&__pyx_n_s_solverProcessSize,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_solverName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_solverProcessIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_solverProcessSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 95, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_solverName = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    __pyx_v_solverProcessIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_solverProcessIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    __pyx_v_solverProcessSize = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_solverProcessSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface___cinit__(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_solverName, __pyx_v_solverProcessIndex, __pyx_v_solverProcessSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_17PySolverInterface_17PySolverInterface___cinit__(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, std::string __pyx_v_solverName, int __pyx_v_solverProcessIndex, int __pyx_v_solverProcessSize) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  precice::SolverInterface *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PySolverInterface.pyx":96
 *    # constructor
 *    def __cinit__ (self, string solverName, int solverProcessIndex, int solverProcessSize):
 *       self.thisptr = new SolverInterface (solverName, solverProcessIndex, solverProcessSize)             # <<<<<<<<<<<<<<
 * 
 *    # destructor
 */
  try {
    __pyx_t_1 = new precice::SolverInterface(__pyx_v_solverName, __pyx_v_solverProcessIndex, __pyx_v_solverProcessSize);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 96, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "PySolverInterface.pyx":95
 * 
 *    # constructor
 *    def __cinit__ (self, string solverName, int solverProcessIndex, int solverProcessSize):             # <<<<<<<<<<<<<<
 *       self.thisptr = new SolverInterface (solverName, solverProcessIndex, solverProcessSize)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":99
 * 
 *    # destructor
 *    def __dealloc__ (self):             # <<<<<<<<<<<<<<
 *       del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_17PySolverInterface_17PySolverInterface_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_17PySolverInterface_17PySolverInterface_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_17PySolverInterface_17PySolverInterface_2__dealloc__(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_17PySolverInterface_17PySolverInterface_2__dealloc__(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "PySolverInterface.pyx":100
 *    # destructor
 *    def __dealloc__ (self):
 *       del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *    # configure
 */
  delete __pyx_v_self->thisptr;

  /* "PySolverInterface.pyx":99
 * 
 *    # destructor
 *    def __dealloc__ (self):             # <<<<<<<<<<<<<<
 *       del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "PySolverInterface.pyx":103
 * 
 *    # configure
 *    def configure (self, string configurationFileName):             # <<<<<<<<<<<<<<
 *       self.thisptr.configure (configurationFileName)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_5configure(PyObject *__pyx_v_self, PyObject *__pyx_arg_configurationFileName); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_5configure(PyObject *__pyx_v_self, PyObject *__pyx_arg_configurationFileName) {
  std::string __pyx_v_configurationFileName;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  assert(__pyx_arg_configurationFileName); {
    __pyx_v_configurationFileName = __pyx_convert_string_from_py_std__in_string(__pyx_arg_configurationFileName); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_4configure(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((std::string)__pyx_v_configurationFileName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_4configure(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, std::string __pyx_v_configurationFileName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure", 0);

  /* "PySolverInterface.pyx":104
 *    # configure
 *    def configure (self, string configurationFileName):
 *       self.thisptr.configure (configurationFileName)             # <<<<<<<<<<<<<<
 * 
 *    # initialize
 */
  __pyx_v_self->thisptr->configure(__pyx_v_configurationFileName);

  /* "PySolverInterface.pyx":103
 * 
 *    # configure
 *    def configure (self, string configurationFileName):             # <<<<<<<<<<<<<<
 *       self.thisptr.configure (configurationFileName)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":107
 * 
 *    # initialize
 *    def initialize (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.initialize ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_7initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_7initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_6initialize(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_6initialize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "PySolverInterface.pyx":108
 *    # initialize
 *    def initialize (self):
 *       return self.thisptr.initialize ()             # <<<<<<<<<<<<<<
 * 
 *    # initialize data
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->initialize()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":107
 * 
 *    # initialize
 *    def initialize (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.initialize ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":111
 * 
 *    # initialize data
 *    def initializeData (self):             # <<<<<<<<<<<<<<
 *       self.thisptr.initializeData ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_9initializeData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_9initializeData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeData (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_8initializeData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_8initializeData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializeData", 0);

  /* "PySolverInterface.pyx":112
 *    # initialize data
 *    def initializeData (self):
 *       self.thisptr.initializeData ()             # <<<<<<<<<<<<<<
 * 
 *    # advance in time
 */
  __pyx_v_self->thisptr->initializeData();

  /* "PySolverInterface.pyx":111
 * 
 *    # initialize data
 *    def initializeData (self):             # <<<<<<<<<<<<<<
 *       self.thisptr.initializeData ()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":115
 * 
 *    # advance in time
 *    def advance (self, double computedTimestepLength):             # <<<<<<<<<<<<<<
 *       return self.thisptr.advance (computedTimestepLength)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_11advance(PyObject *__pyx_v_self, PyObject *__pyx_arg_computedTimestepLength); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_11advance(PyObject *__pyx_v_self, PyObject *__pyx_arg_computedTimestepLength) {
  double __pyx_v_computedTimestepLength;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("advance (wrapper)", 0);
  assert(__pyx_arg_computedTimestepLength); {
    __pyx_v_computedTimestepLength = __pyx_PyFloat_AsDouble(__pyx_arg_computedTimestepLength); if (unlikely((__pyx_v_computedTimestepLength == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.advance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_10advance(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((double)__pyx_v_computedTimestepLength));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_10advance(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, double __pyx_v_computedTimestepLength) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("advance", 0);

  /* "PySolverInterface.pyx":116
 *    # advance in time
 *    def advance (self, double computedTimestepLength):
 *       return self.thisptr.advance (computedTimestepLength)             # <<<<<<<<<<<<<<
 * 
 *    # finalize preCICE
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->advance(__pyx_v_computedTimestepLength)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":115
 * 
 *    # advance in time
 *    def advance (self, double computedTimestepLength):             # <<<<<<<<<<<<<<
 *       return self.thisptr.advance (computedTimestepLength)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.advance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":119
 * 
 *    # finalize preCICE
 *    def finalize (self):             # <<<<<<<<<<<<<<
 *       self.thisptr.finalize ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_13finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_13finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_12finalize(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_12finalize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "PySolverInterface.pyx":120
 *    # finalize preCICE
 *    def finalize (self):
 *       self.thisptr.finalize ()             # <<<<<<<<<<<<<<
 * 
 *    # get dimensions
 */
  __pyx_v_self->thisptr->finalize();

  /* "PySolverInterface.pyx":119
 * 
 *    # finalize preCICE
 *    def finalize (self):             # <<<<<<<<<<<<<<
 *       self.thisptr.finalize ()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":123
 * 
 *    # get dimensions
 *    def getDimensions (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getDimensions ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_15getDimensions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_15getDimensions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDimensions (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_14getDimensions(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_14getDimensions(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getDimensions", 0);

  /* "PySolverInterface.pyx":124
 *    # get dimensions
 *    def getDimensions (self):
 *       return self.thisptr.getDimensions ()             # <<<<<<<<<<<<<<
 * 
 *    # check if coupling is going on
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getDimensions()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":123
 * 
 *    # get dimensions
 *    def getDimensions (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getDimensions ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getDimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":127
 * 
 *    # check if coupling is going on
 *    def isCouplingOngoing (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isCouplingOngoing ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_17isCouplingOngoing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_17isCouplingOngoing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isCouplingOngoing (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_16isCouplingOngoing(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_16isCouplingOngoing(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isCouplingOngoing", 0);

  /* "PySolverInterface.pyx":128
 *    # check if coupling is going on
 *    def isCouplingOngoing (self):
 *       return self.thisptr.isCouplingOngoing ()             # <<<<<<<<<<<<<<
 * 
 *    # check if data is available to be read
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isCouplingOngoing()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":127
 * 
 *    # check if coupling is going on
 *    def isCouplingOngoing (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isCouplingOngoing ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isCouplingOngoing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":131
 * 
 *    # check if data is available to be read
 *    def isReadDataAvailable (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isReadDataAvailable ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_19isReadDataAvailable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_19isReadDataAvailable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isReadDataAvailable (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_18isReadDataAvailable(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_18isReadDataAvailable(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isReadDataAvailable", 0);

  /* "PySolverInterface.pyx":132
 *    # check if data is available to be read
 *    def isReadDataAvailable (self):
 *       return self.thisptr.isReadDataAvailable ()             # <<<<<<<<<<<<<<
 * 
 *    # check if write data is needed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isReadDataAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":131
 * 
 *    # check if data is available to be read
 *    def isReadDataAvailable (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isReadDataAvailable ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isReadDataAvailable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":135
 * 
 *    # check if write data is needed
 *    def isWriteDataRequired (self, double computedTimestepLength):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isWriteDataRequired (computedTimestepLength)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_21isWriteDataRequired(PyObject *__pyx_v_self, PyObject *__pyx_arg_computedTimestepLength); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_21isWriteDataRequired(PyObject *__pyx_v_self, PyObject *__pyx_arg_computedTimestepLength) {
  double __pyx_v_computedTimestepLength;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isWriteDataRequired (wrapper)", 0);
  assert(__pyx_arg_computedTimestepLength); {
    __pyx_v_computedTimestepLength = __pyx_PyFloat_AsDouble(__pyx_arg_computedTimestepLength); if (unlikely((__pyx_v_computedTimestepLength == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isWriteDataRequired", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_20isWriteDataRequired(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((double)__pyx_v_computedTimestepLength));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_20isWriteDataRequired(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, double __pyx_v_computedTimestepLength) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isWriteDataRequired", 0);

  /* "PySolverInterface.pyx":136
 *    # check if write data is needed
 *    def isWriteDataRequired (self, double computedTimestepLength):
 *       return self.thisptr.isWriteDataRequired (computedTimestepLength)             # <<<<<<<<<<<<<<
 * 
 *    # check if time-step is complete
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isWriteDataRequired(__pyx_v_computedTimestepLength)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":135
 * 
 *    # check if write data is needed
 *    def isWriteDataRequired (self, double computedTimestepLength):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isWriteDataRequired (computedTimestepLength)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isWriteDataRequired", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":139
 * 
 *    # check if time-step is complete
 *    def isTimestepComplete (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isTimestepComplete ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_23isTimestepComplete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_23isTimestepComplete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isTimestepComplete (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_22isTimestepComplete(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_22isTimestepComplete(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isTimestepComplete", 0);

  /* "PySolverInterface.pyx":140
 *    # check if time-step is complete
 *    def isTimestepComplete (self):
 *       return self.thisptr.isTimestepComplete ()             # <<<<<<<<<<<<<<
 * 
 *    # check if action is needed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isTimestepComplete()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":139
 * 
 *    # check if time-step is complete
 *    def isTimestepComplete (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.isTimestepComplete ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isTimestepComplete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":143
 * 
 *    # check if action is needed
 *    def isActionRequired (self, action):             # <<<<<<<<<<<<<<
 *       cdef string action_ = action
 *       return self.thisptr.isActionRequired (action_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_25isActionRequired(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_25isActionRequired(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isActionRequired (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_24isActionRequired(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_24isActionRequired(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_action) {
  std::string __pyx_v_action_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isActionRequired", 0);

  /* "PySolverInterface.pyx":144
 *    # check if action is needed
 *    def isActionRequired (self, action):
 *       cdef string action_ = action             # <<<<<<<<<<<<<<
 *       return self.thisptr.isActionRequired (action_)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_action); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_v_action_ = __pyx_t_1;

  /* "PySolverInterface.pyx":145
 *    def isActionRequired (self, action):
 *       cdef string action_ = action
 *       return self.thisptr.isActionRequired (action_)             # <<<<<<<<<<<<<<
 * 
 *    # notify of action being fulfilled
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isActionRequired(__pyx_v_action_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":143
 * 
 *    # check if action is needed
 *    def isActionRequired (self, action):             # <<<<<<<<<<<<<<
 *       cdef string action_ = action
 *       return self.thisptr.isActionRequired (action_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.isActionRequired", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":148
 * 
 *    # notify of action being fulfilled
 *    def fulfilledAction (self, action):             # <<<<<<<<<<<<<<
 *       cdef string action_ = action
 *       self.thisptr.fulfilledAction (action_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_27fulfilledAction(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_27fulfilledAction(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fulfilledAction (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_26fulfilledAction(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_26fulfilledAction(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_action) {
  std::string __pyx_v_action_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("fulfilledAction", 0);

  /* "PySolverInterface.pyx":149
 *    # notify of action being fulfilled
 *    def fulfilledAction (self, action):
 *       cdef string action_ = action             # <<<<<<<<<<<<<<
 *       self.thisptr.fulfilledAction (action_)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_action); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_v_action_ = __pyx_t_1;

  /* "PySolverInterface.pyx":150
 *    def fulfilledAction (self, action):
 *       cdef string action_ = action
 *       self.thisptr.fulfilledAction (action_)             # <<<<<<<<<<<<<<
 * 
 *    # hasMesh
 */
  __pyx_v_self->thisptr->fulfilledAction(__pyx_v_action_);

  /* "PySolverInterface.pyx":148
 * 
 *    # notify of action being fulfilled
 *    def fulfilledAction (self, action):             # <<<<<<<<<<<<<<
 *       cdef string action_ = action
 *       self.thisptr.fulfilledAction (action_)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.fulfilledAction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":153
 * 
 *    # hasMesh
 *    def hasMesh(self, meshName):             # <<<<<<<<<<<<<<
 *       cdef string meshName_ = meshName
 *       return self.thisptr.hasMesh (meshName_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_29hasMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_meshName); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_29hasMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_meshName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasMesh (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_28hasMesh(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_meshName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_28hasMesh(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshName) {
  std::string __pyx_v_meshName_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("hasMesh", 0);

  /* "PySolverInterface.pyx":154
 *    # hasMesh
 *    def hasMesh(self, meshName):
 *       cdef string meshName_ = meshName             # <<<<<<<<<<<<<<
 *       return self.thisptr.hasMesh (meshName_)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_meshName); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_v_meshName_ = __pyx_t_1;

  /* "PySolverInterface.pyx":155
 *    def hasMesh(self, meshName):
 *       cdef string meshName_ = meshName
 *       return self.thisptr.hasMesh (meshName_)             # <<<<<<<<<<<<<<
 * 
 *    # get mesh ID
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->hasMesh(__pyx_v_meshName_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":153
 * 
 *    # hasMesh
 *    def hasMesh(self, meshName):             # <<<<<<<<<<<<<<
 *       cdef string meshName_ = meshName
 *       return self.thisptr.hasMesh (meshName_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.hasMesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":158
 * 
 *    # get mesh ID
 *    def getMeshID (self, meshName):             # <<<<<<<<<<<<<<
 *       cdef string meshName_ = meshName
 *       return self.thisptr.getMeshID (meshName_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_31getMeshID(PyObject *__pyx_v_self, PyObject *__pyx_v_meshName); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_31getMeshID(PyObject *__pyx_v_self, PyObject *__pyx_v_meshName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMeshID (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_30getMeshID(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_meshName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_30getMeshID(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshName) {
  std::string __pyx_v_meshName_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getMeshID", 0);

  /* "PySolverInterface.pyx":159
 *    # get mesh ID
 *    def getMeshID (self, meshName):
 *       cdef string meshName_ = meshName             # <<<<<<<<<<<<<<
 *       return self.thisptr.getMeshID (meshName_)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_meshName); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_v_meshName_ = __pyx_t_1;

  /* "PySolverInterface.pyx":160
 *    def getMeshID (self, meshName):
 *       cdef string meshName_ = meshName
 *       return self.thisptr.getMeshID (meshName_)             # <<<<<<<<<<<<<<
 * 
 *    # get mesh IDs
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getMeshID(__pyx_v_meshName_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":158
 * 
 *    # get mesh ID
 *    def getMeshID (self, meshName):             # <<<<<<<<<<<<<<
 *       cdef string meshName_ = meshName
 *       return self.thisptr.getMeshID (meshName_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getMeshID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":163
 * 
 *    # get mesh IDs
 *    def getMeshIDs (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getMeshIDs ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_33getMeshIDs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_33getMeshIDs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMeshIDs (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_32getMeshIDs(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_32getMeshIDs(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getMeshIDs", 0);

  /* "PySolverInterface.pyx":164
 *    # get mesh IDs
 *    def getMeshIDs (self):
 *       return self.thisptr.getMeshIDs ()             # <<<<<<<<<<<<<<
 * 
 *    # hasData
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_set_to_py_int(__pyx_v_self->thisptr->getMeshIDs()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":163
 * 
 *    # get mesh IDs
 *    def getMeshIDs (self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getMeshIDs ()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getMeshIDs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":167
 * 
 *    # hasData
 *    def hasData (self, dataName, meshID):             # <<<<<<<<<<<<<<
 *       cdef string dataName_ = dataName
 *       return self.thisptr.hasData(dataName_, meshID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_35hasData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_35hasData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataName = 0;
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataName,&__pyx_n_s_meshID,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hasData", 1, 2, 2, 1); __PYX_ERR(0, 167, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hasData") < 0)) __PYX_ERR(0, 167, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dataName = values[0];
    __pyx_v_meshID = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hasData", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.hasData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_34hasData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataName, __pyx_v_meshID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_34hasData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataName, PyObject *__pyx_v_meshID) {
  std::string __pyx_v_dataName_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("hasData", 0);

  /* "PySolverInterface.pyx":168
 *    # hasData
 *    def hasData (self, dataName, meshID):
 *       cdef string dataName_ = dataName             # <<<<<<<<<<<<<<
 *       return self.thisptr.hasData(dataName_, meshID)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dataName); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_v_dataName_ = __pyx_t_1;

  /* "PySolverInterface.pyx":169
 *    def hasData (self, dataName, meshID):
 *       cdef string dataName_ = dataName
 *       return self.thisptr.hasData(dataName_, meshID)             # <<<<<<<<<<<<<<
 * 
 *    def getDataID (self, dataName, meshID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->hasData(__pyx_v_dataName_, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":167
 * 
 *    # hasData
 *    def hasData (self, dataName, meshID):             # <<<<<<<<<<<<<<
 *       cdef string dataName_ = dataName
 *       return self.thisptr.hasData(dataName_, meshID)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.hasData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":171
 *       return self.thisptr.hasData(dataName_, meshID)
 * 
 *    def getDataID (self, dataName, meshID):             # <<<<<<<<<<<<<<
 *       cdef string dataName_ = dataName
 *       return self.thisptr.getDataID (dataName_, meshID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_37getDataID(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_37getDataID(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataName = 0;
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDataID (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataName,&__pyx_n_s_meshID,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getDataID", 1, 2, 2, 1); __PYX_ERR(0, 171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getDataID") < 0)) __PYX_ERR(0, 171, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dataName = values[0];
    __pyx_v_meshID = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDataID", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getDataID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_36getDataID(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataName, __pyx_v_meshID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_36getDataID(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataName, PyObject *__pyx_v_meshID) {
  std::string __pyx_v_dataName_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getDataID", 0);

  /* "PySolverInterface.pyx":172
 * 
 *    def getDataID (self, dataName, meshID):
 *       cdef string dataName_ = dataName             # <<<<<<<<<<<<<<
 *       return self.thisptr.getDataID (dataName_, meshID)
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dataName); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_v_dataName_ = __pyx_t_1;

  /* "PySolverInterface.pyx":173
 *    def getDataID (self, dataName, meshID):
 *       cdef string dataName_ = dataName
 *       return self.thisptr.getDataID (dataName_, meshID)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshVertices (self, meshID, size, positions, ids):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getDataID(__pyx_v_dataName_, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":171
 *       return self.thisptr.hasData(dataName_, meshID)
 * 
 *    def getDataID (self, dataName, meshID):             # <<<<<<<<<<<<<<
 *       cdef string dataName_ = dataName
 *       return self.thisptr.getDataID (dataName_, meshID)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getDataID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":175
 *       return self.thisptr.getDataID (dataName_, meshID)
 * 
 *    def setMeshVertices (self, meshID, size, positions, ids):             # <<<<<<<<<<<<<<
 *       cdef int* ids_
 *       cdef double* positions_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_39setMeshVertices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_39setMeshVertices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_positions = 0;
  PyObject *__pyx_v_ids = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshVertices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_size,&__pyx_n_s_positions,&__pyx_n_s_ids,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshVertices", 1, 4, 4, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshVertices", 1, 4, 4, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshVertices", 1, 4, 4, 3); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshVertices") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_positions = values[2];
    __pyx_v_ids = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshVertices", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_38setMeshVertices(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_size, __pyx_v_positions, __pyx_v_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_38setMeshVertices(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_size, PyObject *__pyx_v_positions, PyObject *__pyx_v_ids) {
  int *__pyx_v_ids_;
  double *__pyx_v_positions_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("setMeshVertices", 0);

  /* "PySolverInterface.pyx":178
 *       cdef int* ids_
 *       cdef double* positions_
 *       ids_ = <int*> malloc(len(ids) * sizeof(int))             # <<<<<<<<<<<<<<
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_v_ids_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":179
 *       cdef double* positions_
 *       ids_ = <int*> malloc(len(ids) * sizeof(int))
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if ids_ is NULL or positions_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 179, __pyx_L1_error)
  __pyx_v_positions_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":181
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 *       if ids_ is NULL or positions_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_ids_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_positions_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":182
 * 
 *       if ids_ is NULL or positions_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(ids)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 182, __pyx_L1_error)

    /* "PySolverInterface.pyx":181
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 *       if ids_ is NULL or positions_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":184
 *          raise MemoryError()
 * 
 *       for i in xrange(len(ids)):             # <<<<<<<<<<<<<<
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 184, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":185
 * 
 *       for i in xrange(len(ids)):
 *          ids_[i] = ids[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(positions)):
 *          positions_[i] = positions[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ids, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_ids_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":186
 *       for i in xrange(len(ids)):
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):             # <<<<<<<<<<<<<<
 *          positions_[i] = positions[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 186, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":187
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):
 *          positions_[i] = positions[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.setMeshVertices (meshID, size, positions_, ids_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_positions_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":189
 *          positions_[i] = positions[i]
 * 
 *       self.thisptr.setMeshVertices (meshID, size, positions_, ids_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(ids)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_v_self->thisptr->setMeshVertices(__pyx_t_6, __pyx_t_8, __pyx_v_positions_, __pyx_v_ids_);

  /* "PySolverInterface.pyx":191
 *       self.thisptr.setMeshVertices (meshID, size, positions_, ids_)
 * 
 *       for i in xrange(len(ids)):             # <<<<<<<<<<<<<<
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 191, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":192
 * 
 *       for i in xrange(len(ids)):
 *          ids[i] = ids_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(positions)):
 *          positions[i] = positions_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_ids_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_ids, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":193
 *       for i in xrange(len(ids)):
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):             # <<<<<<<<<<<<<<
 *          positions[i] = positions_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 193, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":194
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):
 *          positions[i] = positions_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(ids_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_positions_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_positions, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":196
 *          positions[i] = positions_[i]
 * 
 *       free(ids_)             # <<<<<<<<<<<<<<
 *       free(positions_)
 * 
 */
  free(__pyx_v_ids_);

  /* "PySolverInterface.pyx":197
 * 
 *       free(ids_)
 *       free(positions_)             # <<<<<<<<<<<<<<
 * 
 *    def getMeshVertexSize (self, meshID):
 */
  free(__pyx_v_positions_);

  /* "PySolverInterface.pyx":175
 *       return self.thisptr.getDataID (dataName_, meshID)
 * 
 *    def setMeshVertices (self, meshID, size, positions, ids):             # <<<<<<<<<<<<<<
 *       cdef int* ids_
 *       cdef double* positions_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":199
 *       free(positions_)
 * 
 *    def getMeshVertexSize (self, meshID):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getMeshVertexSize(meshID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_41getMeshVertexSize(PyObject *__pyx_v_self, PyObject *__pyx_v_meshID); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_41getMeshVertexSize(PyObject *__pyx_v_self, PyObject *__pyx_v_meshID) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMeshVertexSize (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_40getMeshVertexSize(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_meshID));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_40getMeshVertexSize(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getMeshVertexSize", 0);

  /* "PySolverInterface.pyx":200
 * 
 *    def getMeshVertexSize (self, meshID):
 *       return self.thisptr.getMeshVertexSize(meshID)             # <<<<<<<<<<<<<<
 * 
 *    def getMeshVertexIDsFromPositions (self, meshID, size, positions, ids):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getMeshVertexSize(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":199
 *       free(positions_)
 * 
 *    def getMeshVertexSize (self, meshID):             # <<<<<<<<<<<<<<
 *       return self.thisptr.getMeshVertexSize(meshID)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getMeshVertexSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":202
 *       return self.thisptr.getMeshVertexSize(meshID)
 * 
 *    def getMeshVertexIDsFromPositions (self, meshID, size, positions, ids):             # <<<<<<<<<<<<<<
 *       cdef int* ids_
 *       cdef double* positions_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_43getMeshVertexIDsFromPositions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_43getMeshVertexIDsFromPositions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_positions = 0;
  PyObject *__pyx_v_ids = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMeshVertexIDsFromPositions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_size,&__pyx_n_s_positions,&__pyx_n_s_ids,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMeshVertexIDsFromPositions", 1, 4, 4, 1); __PYX_ERR(0, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMeshVertexIDsFromPositions", 1, 4, 4, 2); __PYX_ERR(0, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMeshVertexIDsFromPositions", 1, 4, 4, 3); __PYX_ERR(0, 202, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getMeshVertexIDsFromPositions") < 0)) __PYX_ERR(0, 202, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_positions = values[2];
    __pyx_v_ids = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMeshVertexIDsFromPositions", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 202, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getMeshVertexIDsFromPositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_42getMeshVertexIDsFromPositions(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_size, __pyx_v_positions, __pyx_v_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_42getMeshVertexIDsFromPositions(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_size, PyObject *__pyx_v_positions, PyObject *__pyx_v_ids) {
  int *__pyx_v_ids_;
  double *__pyx_v_positions_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("getMeshVertexIDsFromPositions", 0);

  /* "PySolverInterface.pyx":206
 *       cdef double* positions_
 * 
 *       ids_ = <int*> malloc(len(ids) * sizeof(int))             # <<<<<<<<<<<<<<
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_v_ids_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":207
 * 
 *       ids_ = <int*> malloc(len(ids) * sizeof(int))
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if ids_ is NULL or positions_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_v_positions_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":209
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 *       if ids_ is NULL or positions_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_ids_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_positions_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":210
 * 
 *       if ids_ is NULL or positions_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(ids)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 210, __pyx_L1_error)

    /* "PySolverInterface.pyx":209
 *       positions_ = <double*> malloc(len(positions) * sizeof(double))
 * 
 *       if ids_ is NULL or positions_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":212
 *          raise MemoryError()
 * 
 *       for i in xrange(len(ids)):             # <<<<<<<<<<<<<<
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 212, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":213
 * 
 *       for i in xrange(len(ids)):
 *          ids_[i] = ids[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(positions)):
 *          positions_[i] = positions[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ids, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_ids_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":214
 *       for i in xrange(len(ids)):
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):             # <<<<<<<<<<<<<<
 *          positions_[i] = positions[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 214, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":215
 *          ids_[i] = ids[i]
 *       for i in xrange(len(positions)):
 *          positions_[i] = positions[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.getMeshVertexIDsFromPositions (meshID, size, positions_, ids_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_positions_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":217
 *          positions_[i] = positions[i]
 * 
 *       self.thisptr.getMeshVertexIDsFromPositions (meshID, size, positions_, ids_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(ids)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_v_self->thisptr->getMeshVertexIDsFromPositions(__pyx_t_6, __pyx_t_8, __pyx_v_positions_, __pyx_v_ids_);

  /* "PySolverInterface.pyx":219
 *       self.thisptr.getMeshVertexIDsFromPositions (meshID, size, positions_, ids_)
 * 
 *       for i in xrange(len(ids)):             # <<<<<<<<<<<<<<
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 219, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":220
 * 
 *       for i in xrange(len(ids)):
 *          ids[i] = ids_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(positions)):
 *          positions[i] = positions_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_ids_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_ids, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":221
 *       for i in xrange(len(ids)):
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):             # <<<<<<<<<<<<<<
 *          positions[i] = positions_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 221, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":222
 *          ids[i] = ids_[i]
 *       for i in xrange(len(positions)):
 *          positions[i] = positions_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(ids_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_positions_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_positions, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":224
 *          positions[i] = positions_[i]
 * 
 *       free(ids_)             # <<<<<<<<<<<<<<
 *       free(positions_)
 * 
 */
  free(__pyx_v_ids_);

  /* "PySolverInterface.pyx":225
 * 
 *       free(ids_)
 *       free(positions_)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshEdge (self, meshID, firstVertexID, secondVertexID):
 */
  free(__pyx_v_positions_);

  /* "PySolverInterface.pyx":202
 *       return self.thisptr.getMeshVertexSize(meshID)
 * 
 *    def getMeshVertexIDsFromPositions (self, meshID, size, positions, ids):             # <<<<<<<<<<<<<<
 *       cdef int* ids_
 *       cdef double* positions_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.getMeshVertexIDsFromPositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":227
 *       free(positions_)
 * 
 *    def setMeshEdge (self, meshID, firstVertexID, secondVertexID):             # <<<<<<<<<<<<<<
 *       return self.thisptr.setMeshEdge (meshID, firstVertexID, secondVertexID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_45setMeshEdge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_45setMeshEdge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_firstVertexID = 0;
  PyObject *__pyx_v_secondVertexID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshEdge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_firstVertexID,&__pyx_n_s_secondVertexID,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_firstVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshEdge", 1, 3, 3, 1); __PYX_ERR(0, 227, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_secondVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshEdge", 1, 3, 3, 2); __PYX_ERR(0, 227, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshEdge") < 0)) __PYX_ERR(0, 227, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_firstVertexID = values[1];
    __pyx_v_secondVertexID = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshEdge", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_44setMeshEdge(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_firstVertexID, __pyx_v_secondVertexID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_44setMeshEdge(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("setMeshEdge", 0);

  /* "PySolverInterface.pyx":228
 * 
 *    def setMeshEdge (self, meshID, firstVertexID, secondVertexID):
 *       return self.thisptr.setMeshEdge (meshID, firstVertexID, secondVertexID)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshTriangle (self, meshID, firstEdgeID, secondEdgeID, thirdEdgeID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_firstVertexID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_secondVertexID); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->setMeshEdge(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PySolverInterface.pyx":227
 *       free(positions_)
 * 
 *    def setMeshEdge (self, meshID, firstVertexID, secondVertexID):             # <<<<<<<<<<<<<<
 *       return self.thisptr.setMeshEdge (meshID, firstVertexID, secondVertexID)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":230
 *       return self.thisptr.setMeshEdge (meshID, firstVertexID, secondVertexID)
 * 
 *    def setMeshTriangle (self, meshID, firstEdgeID, secondEdgeID, thirdEdgeID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshTriangle (meshID, firstEdgeID, secondEdgeID, thirdEdgeID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_47setMeshTriangle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_47setMeshTriangle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_firstEdgeID = 0;
  PyObject *__pyx_v_secondEdgeID = 0;
  PyObject *__pyx_v_thirdEdgeID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshTriangle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_firstEdgeID,&__pyx_n_s_secondEdgeID,&__pyx_n_s_thirdEdgeID,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_firstEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangle", 1, 4, 4, 1); __PYX_ERR(0, 230, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_secondEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangle", 1, 4, 4, 2); __PYX_ERR(0, 230, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thirdEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangle", 1, 4, 4, 3); __PYX_ERR(0, 230, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshTriangle") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_firstEdgeID = values[1];
    __pyx_v_secondEdgeID = values[2];
    __pyx_v_thirdEdgeID = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshTriangle", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshTriangle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_46setMeshTriangle(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_firstEdgeID, __pyx_v_secondEdgeID, __pyx_v_thirdEdgeID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_46setMeshTriangle(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstEdgeID, PyObject *__pyx_v_secondEdgeID, PyObject *__pyx_v_thirdEdgeID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setMeshTriangle", 0);

  /* "PySolverInterface.pyx":231
 * 
 *    def setMeshTriangle (self, meshID, firstEdgeID, secondEdgeID, thirdEdgeID):
 *       self.thisptr.setMeshTriangle (meshID, firstEdgeID, secondEdgeID, thirdEdgeID)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshTriangleWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_firstEdgeID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_secondEdgeID); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_thirdEdgeID); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_v_self->thisptr->setMeshTriangle(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "PySolverInterface.pyx":230
 *       return self.thisptr.setMeshEdge (meshID, firstVertexID, secondVertexID)
 * 
 *    def setMeshTriangle (self, meshID, firstEdgeID, secondEdgeID, thirdEdgeID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshTriangle (meshID, firstEdgeID, secondEdgeID, thirdEdgeID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshTriangle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":233
 *       self.thisptr.setMeshTriangle (meshID, firstEdgeID, secondEdgeID, thirdEdgeID)
 * 
 *    def setMeshTriangleWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshTriangleWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_49setMeshTriangleWithEdges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_49setMeshTriangleWithEdges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_firstVertexID = 0;
  PyObject *__pyx_v_secondVertexID = 0;
  PyObject *__pyx_v_thirdVertexID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshTriangleWithEdges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_firstVertexID,&__pyx_n_s_secondVertexID,&__pyx_n_s_thirdVertexID,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_firstVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangleWithEdges", 1, 4, 4, 1); __PYX_ERR(0, 233, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_secondVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangleWithEdges", 1, 4, 4, 2); __PYX_ERR(0, 233, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thirdVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshTriangleWithEdges", 1, 4, 4, 3); __PYX_ERR(0, 233, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshTriangleWithEdges") < 0)) __PYX_ERR(0, 233, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_firstVertexID = values[1];
    __pyx_v_secondVertexID = values[2];
    __pyx_v_thirdVertexID = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshTriangleWithEdges", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 233, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshTriangleWithEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_48setMeshTriangleWithEdges(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_firstVertexID, __pyx_v_secondVertexID, __pyx_v_thirdVertexID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_48setMeshTriangleWithEdges(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID, PyObject *__pyx_v_thirdVertexID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setMeshTriangleWithEdges", 0);

  /* "PySolverInterface.pyx":234
 * 
 *    def setMeshTriangleWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID):
 *       self.thisptr.setMeshTriangleWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshQuad (self, int meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_firstVertexID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_secondVertexID); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_thirdVertexID); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_v_self->thisptr->setMeshTriangleWithEdges(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "PySolverInterface.pyx":233
 *       self.thisptr.setMeshTriangle (meshID, firstEdgeID, secondEdgeID, thirdEdgeID)
 * 
 *    def setMeshTriangleWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshTriangleWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshTriangleWithEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":236
 *       self.thisptr.setMeshTriangleWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID)
 * 
 *    def setMeshQuad (self, int meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshQuad (meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_51setMeshQuad(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_51setMeshQuad(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_meshID;
  PyObject *__pyx_v_firstEdgeID = 0;
  PyObject *__pyx_v_secondEdgeID = 0;
  PyObject *__pyx_v_thirdEdgeID = 0;
  PyObject *__pyx_v_fourthEdgeID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshQuad (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_firstEdgeID,&__pyx_n_s_secondEdgeID,&__pyx_n_s_thirdEdgeID,&__pyx_n_s_fourthEdgeID,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_firstEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuad", 1, 5, 5, 1); __PYX_ERR(0, 236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_secondEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuad", 1, 5, 5, 2); __PYX_ERR(0, 236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thirdEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuad", 1, 5, 5, 3); __PYX_ERR(0, 236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fourthEdgeID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuad", 1, 5, 5, 4); __PYX_ERR(0, 236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshQuad") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_meshID = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_meshID == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L3_error)
    __pyx_v_firstEdgeID = values[1];
    __pyx_v_secondEdgeID = values[2];
    __pyx_v_thirdEdgeID = values[3];
    __pyx_v_fourthEdgeID = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshQuad", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshQuad", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_50setMeshQuad(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_firstEdgeID, __pyx_v_secondEdgeID, __pyx_v_thirdEdgeID, __pyx_v_fourthEdgeID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_50setMeshQuad(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, int __pyx_v_meshID, PyObject *__pyx_v_firstEdgeID, PyObject *__pyx_v_secondEdgeID, PyObject *__pyx_v_thirdEdgeID, PyObject *__pyx_v_fourthEdgeID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setMeshQuad", 0);

  /* "PySolverInterface.pyx":237
 * 
 *    def setMeshQuad (self, int meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID):
 *       self.thisptr.setMeshQuad (meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID)             # <<<<<<<<<<<<<<
 * 
 *    def setMeshQuadWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_firstEdgeID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_secondEdgeID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_thirdEdgeID); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_fourthEdgeID); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_v_self->thisptr->setMeshQuad(__pyx_v_meshID, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "PySolverInterface.pyx":236
 *       self.thisptr.setMeshTriangleWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID)
 * 
 *    def setMeshQuad (self, int meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshQuad (meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshQuad", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":239
 *       self.thisptr.setMeshQuad (meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID)
 * 
 *    def setMeshQuadWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshQuadWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_53setMeshQuadWithEdges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_53setMeshQuadWithEdges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_meshID = 0;
  PyObject *__pyx_v_firstVertexID = 0;
  PyObject *__pyx_v_secondVertexID = 0;
  PyObject *__pyx_v_thirdVertexID = 0;
  PyObject *__pyx_v_fourthVertexID = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMeshQuadWithEdges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_meshID,&__pyx_n_s_firstVertexID,&__pyx_n_s_secondVertexID,&__pyx_n_s_thirdVertexID,&__pyx_n_s_fourthVertexID,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_meshID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_firstVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuadWithEdges", 1, 5, 5, 1); __PYX_ERR(0, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_secondVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuadWithEdges", 1, 5, 5, 2); __PYX_ERR(0, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thirdVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuadWithEdges", 1, 5, 5, 3); __PYX_ERR(0, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fourthVertexID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMeshQuadWithEdges", 1, 5, 5, 4); __PYX_ERR(0, 239, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMeshQuadWithEdges") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_meshID = values[0];
    __pyx_v_firstVertexID = values[1];
    __pyx_v_secondVertexID = values[2];
    __pyx_v_thirdVertexID = values[3];
    __pyx_v_fourthVertexID = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMeshQuadWithEdges", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshQuadWithEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_52setMeshQuadWithEdges(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_meshID, __pyx_v_firstVertexID, __pyx_v_secondVertexID, __pyx_v_thirdVertexID, __pyx_v_fourthVertexID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_52setMeshQuadWithEdges(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_meshID, PyObject *__pyx_v_firstVertexID, PyObject *__pyx_v_secondVertexID, PyObject *__pyx_v_thirdVertexID, PyObject *__pyx_v_fourthVertexID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("setMeshQuadWithEdges", 0);

  /* "PySolverInterface.pyx":240
 * 
 *    def setMeshQuadWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID):
 *       self.thisptr.setMeshQuadWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID)             # <<<<<<<<<<<<<<
 * 
 *    def mapReadDataTo (self, toMeshID):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_meshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_firstVertexID); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_secondVertexID); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_thirdVertexID); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_fourthVertexID); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_v_self->thisptr->setMeshQuadWithEdges(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);

  /* "PySolverInterface.pyx":239
 *       self.thisptr.setMeshQuad (meshID, firstEdgeID, secondEdgeID, thirdEdgeID, fourthEdgeID)
 * 
 *    def setMeshQuadWithEdges (self, meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID):             # <<<<<<<<<<<<<<
 *       self.thisptr.setMeshQuadWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.setMeshQuadWithEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":242
 *       self.thisptr.setMeshQuadWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID)
 * 
 *    def mapReadDataTo (self, toMeshID):             # <<<<<<<<<<<<<<
 *       self.thisptr.mapReadDataTo (toMeshID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_55mapReadDataTo(PyObject *__pyx_v_self, PyObject *__pyx_v_toMeshID); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_55mapReadDataTo(PyObject *__pyx_v_self, PyObject *__pyx_v_toMeshID) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mapReadDataTo (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_54mapReadDataTo(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_toMeshID));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_54mapReadDataTo(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_toMeshID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mapReadDataTo", 0);

  /* "PySolverInterface.pyx":243
 * 
 *    def mapReadDataTo (self, toMeshID):
 *       self.thisptr.mapReadDataTo (toMeshID)             # <<<<<<<<<<<<<<
 * 
 *    def mapWriteDataFrom (self, fromMeshID):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_toMeshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_v_self->thisptr->mapReadDataTo(__pyx_t_1);

  /* "PySolverInterface.pyx":242
 *       self.thisptr.setMeshQuadWithEdges (meshID, firstVertexID, secondVertexID, thirdVertexID, fourthVertexID)
 * 
 *    def mapReadDataTo (self, toMeshID):             # <<<<<<<<<<<<<<
 *       self.thisptr.mapReadDataTo (toMeshID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.mapReadDataTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":245
 *       self.thisptr.mapReadDataTo (toMeshID)
 * 
 *    def mapWriteDataFrom (self, fromMeshID):             # <<<<<<<<<<<<<<
 *       self.thisptr.mapWriteDataFrom (fromMeshID)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_57mapWriteDataFrom(PyObject *__pyx_v_self, PyObject *__pyx_v_fromMeshID); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_57mapWriteDataFrom(PyObject *__pyx_v_self, PyObject *__pyx_v_fromMeshID) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mapWriteDataFrom (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_56mapWriteDataFrom(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v_fromMeshID));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_56mapWriteDataFrom(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_fromMeshID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mapWriteDataFrom", 0);

  /* "PySolverInterface.pyx":246
 * 
 *    def mapWriteDataFrom (self, fromMeshID):
 *       self.thisptr.mapWriteDataFrom (fromMeshID)             # <<<<<<<<<<<<<<
 * 
 *    def writeBlockVectorData (self, dataID, size, valueIndices, values):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_fromMeshID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_v_self->thisptr->mapWriteDataFrom(__pyx_t_1);

  /* "PySolverInterface.pyx":245
 *       self.thisptr.mapReadDataTo (toMeshID)
 * 
 *    def mapWriteDataFrom (self, fromMeshID):             # <<<<<<<<<<<<<<
 *       self.thisptr.mapWriteDataFrom (fromMeshID)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.mapWriteDataFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":248
 *       self.thisptr.mapWriteDataFrom (fromMeshID)
 * 
 *    def writeBlockVectorData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_59writeBlockVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_59writeBlockVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_valueIndices = 0;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeBlockVectorData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_size,&__pyx_n_s_valueIndices,&__pyx_n_s_values,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockVectorData", 1, 4, 4, 1); __PYX_ERR(0, 248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockVectorData", 1, 4, 4, 2); __PYX_ERR(0, 248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockVectorData", 1, 4, 4, 3); __PYX_ERR(0, 248, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeBlockVectorData") < 0)) __PYX_ERR(0, 248, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_valueIndices = values[2];
    __pyx_v_values = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeBlockVectorData", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 248, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeBlockVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_58writeBlockVectorData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_size, __pyx_v_valueIndices, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_58writeBlockVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values) {
  int *__pyx_v_valueIndices_;
  double *__pyx_v_values_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("writeBlockVectorData", 0);

  /* "PySolverInterface.pyx":251
 *       cdef int* valueIndices_
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))             # <<<<<<<<<<<<<<
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_v_valueIndices_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":252
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))
 *       values_ = <double*> malloc(len(values) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_v_values_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":254
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_valueIndices_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_values_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":255
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 255, __pyx_L1_error)

    /* "PySolverInterface.pyx":254
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":257
 *          raise MemoryError()
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 257, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":258
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_valueIndices, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_valueIndices_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":259
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values_[i] = values[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 259, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":260
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.writeBlockVectorData (dataID, size, valueIndices_, values_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_values_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":262
 *          values_[i] = values[i]
 * 
 *       self.thisptr.writeBlockVectorData (dataID, size, valueIndices_, values_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_v_self->thisptr->writeBlockVectorData(__pyx_t_6, __pyx_t_8, __pyx_v_valueIndices_, __pyx_v_values_);

  /* "PySolverInterface.pyx":264
 *       self.thisptr.writeBlockVectorData (dataID, size, valueIndices_, values_)
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 264, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":265
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_valueIndices_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_valueIndices, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":266
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values[i] = values_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 266, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":267
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(valueIndices_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_values_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":269
 *          values[i] = values_[i]
 * 
 *       free(valueIndices_)             # <<<<<<<<<<<<<<
 *       free(values_)
 * 
 */
  free(__pyx_v_valueIndices_);

  /* "PySolverInterface.pyx":270
 * 
 *       free(valueIndices_)
 *       free(values_)             # <<<<<<<<<<<<<<
 * 
 *    def writeVectorData (self, dataID, valueIndex, value):
 */
  free(__pyx_v_values_);

  /* "PySolverInterface.pyx":248
 *       self.thisptr.mapWriteDataFrom (fromMeshID)
 * 
 *    def writeBlockVectorData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeBlockVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":272
 *       free(values_)
 * 
 *    def writeVectorData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_61writeVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_61writeVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_valueIndex = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeVectorData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_valueIndex,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeVectorData", 1, 3, 3, 1); __PYX_ERR(0, 272, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeVectorData", 1, 3, 3, 2); __PYX_ERR(0, 272, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeVectorData") < 0)) __PYX_ERR(0, 272, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_valueIndex = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeVectorData", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_60writeVectorData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_valueIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_60writeVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value) {
  double *__pyx_v_value_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("writeVectorData", 0);

  /* "PySolverInterface.pyx":274
 *    def writeVectorData (self, dataID, valueIndex, value):
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if value_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_v_value_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":276
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 * 
 *       if value_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_value_ == NULL) != 0);
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":277
 * 
 *       if value_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(value)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 277, __pyx_L1_error)

    /* "PySolverInterface.pyx":276
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 * 
 *       if value_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":279
 *          raise MemoryError()
 * 
 *       for i in xrange(len(value)):             # <<<<<<<<<<<<<<
 *          value_[i] = value[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 279, __pyx_L1_error)
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PySolverInterface.pyx":280
 * 
 *       for i in xrange(len(value)):
 *          value_[i] = value[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.writeVectorData (dataID, valueIndex, value_)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_value_[__pyx_v_i]) = __pyx_t_5;
  }

  /* "PySolverInterface.pyx":282
 *          value_[i] = value[i]
 * 
 *       self.thisptr.writeVectorData (dataID, valueIndex, value_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(value)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_valueIndex); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_v_self->thisptr->writeVectorData(__pyx_t_6, __pyx_t_7, __pyx_v_value_);

  /* "PySolverInterface.pyx":284
 *       self.thisptr.writeVectorData (dataID, valueIndex, value_)
 * 
 *       for i in xrange(len(value)):             # <<<<<<<<<<<<<<
 *          value[i] = value_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 284, __pyx_L1_error)
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PySolverInterface.pyx":285
 * 
 *       for i in xrange(len(value)):
 *          value[i] = value_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(value_)
 */
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_value_[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_value, __pyx_v_i, __pyx_t_4, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "PySolverInterface.pyx":287
 *          value[i] = value_[i]
 * 
 *       free(value_)             # <<<<<<<<<<<<<<
 * 
 *    def writeBlockScalarData (self, dataID, size, valueIndices, values):
 */
  free(__pyx_v_value_);

  /* "PySolverInterface.pyx":272
 *       free(values_)
 * 
 *    def writeVectorData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":289
 *       free(value_)
 * 
 *    def writeBlockScalarData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_63writeBlockScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_63writeBlockScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_valueIndices = 0;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeBlockScalarData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_size,&__pyx_n_s_valueIndices,&__pyx_n_s_values,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockScalarData", 1, 4, 4, 1); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockScalarData", 1, 4, 4, 2); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeBlockScalarData", 1, 4, 4, 3); __PYX_ERR(0, 289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeBlockScalarData") < 0)) __PYX_ERR(0, 289, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_valueIndices = values[2];
    __pyx_v_values = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeBlockScalarData", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeBlockScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_62writeBlockScalarData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_size, __pyx_v_valueIndices, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_62writeBlockScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values) {
  int *__pyx_v_valueIndices_;
  double *__pyx_v_values_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("writeBlockScalarData", 0);

  /* "PySolverInterface.pyx":292
 *       cdef int* valueIndices_
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))             # <<<<<<<<<<<<<<
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_v_valueIndices_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":293
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))
 *       values_ = <double*> malloc(len(values) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_v_values_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":295
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_valueIndices_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_values_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":296
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 296, __pyx_L1_error)

    /* "PySolverInterface.pyx":295
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":298
 *          raise MemoryError()
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":299
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_valueIndices, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_valueIndices_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":300
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values_[i] = values[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 300, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":301
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.writeBlockScalarData (dataID, size, valueIndices_, values_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_values_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":303
 *          values_[i] = values[i]
 * 
 *       self.thisptr.writeBlockScalarData (dataID, size, valueIndices_, values_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_v_self->thisptr->writeBlockScalarData(__pyx_t_6, __pyx_t_8, __pyx_v_valueIndices_, __pyx_v_values_);

  /* "PySolverInterface.pyx":305
 *       self.thisptr.writeBlockScalarData (dataID, size, valueIndices_, values_)
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 305, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":306
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_valueIndices_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_valueIndices, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":307
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values[i] = values_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 307, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":308
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(valueIndices_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_values_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":310
 *          values[i] = values_[i]
 * 
 *       free(valueIndices_)             # <<<<<<<<<<<<<<
 *       free(values_)
 * 
 */
  free(__pyx_v_valueIndices_);

  /* "PySolverInterface.pyx":311
 * 
 *       free(valueIndices_)
 *       free(values_)             # <<<<<<<<<<<<<<
 * 
 *    def writeScalarData (self, dataID, valueIndex, value):
 */
  free(__pyx_v_values_);

  /* "PySolverInterface.pyx":289
 *       free(value_)
 * 
 *    def writeBlockScalarData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeBlockScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":313
 *       free(values_)
 * 
 *    def writeScalarData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       self.thisptr.writeScalarData (dataID, valueIndex, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_65writeScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_65writeScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_valueIndex = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeScalarData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_valueIndex,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeScalarData", 1, 3, 3, 1); __PYX_ERR(0, 313, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeScalarData", 1, 3, 3, 2); __PYX_ERR(0, 313, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeScalarData") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_valueIndex = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeScalarData", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_64writeScalarData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_valueIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_64writeScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("writeScalarData", 0);

  /* "PySolverInterface.pyx":314
 * 
 *    def writeScalarData (self, dataID, valueIndex, value):
 *       self.thisptr.writeScalarData (dataID, valueIndex, value)             # <<<<<<<<<<<<<<
 * 
 *    def readBlockVectorData (self, dataID, size, valueIndices, values):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_valueIndex); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_v_self->thisptr->writeScalarData(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "PySolverInterface.pyx":313
 *       free(values_)
 * 
 *    def writeScalarData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       self.thisptr.writeScalarData (dataID, valueIndex, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.writeScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":316
 *       self.thisptr.writeScalarData (dataID, valueIndex, value)
 * 
 *    def readBlockVectorData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_67readBlockVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_67readBlockVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_valueIndices = 0;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readBlockVectorData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_size,&__pyx_n_s_valueIndices,&__pyx_n_s_values,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockVectorData", 1, 4, 4, 1); __PYX_ERR(0, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockVectorData", 1, 4, 4, 2); __PYX_ERR(0, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockVectorData", 1, 4, 4, 3); __PYX_ERR(0, 316, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readBlockVectorData") < 0)) __PYX_ERR(0, 316, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_valueIndices = values[2];
    __pyx_v_values = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readBlockVectorData", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 316, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readBlockVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_66readBlockVectorData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_size, __pyx_v_valueIndices, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_66readBlockVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values) {
  int *__pyx_v_valueIndices_;
  double *__pyx_v_values_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("readBlockVectorData", 0);

  /* "PySolverInterface.pyx":319
 *       cdef int* valueIndices_
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))             # <<<<<<<<<<<<<<
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_v_valueIndices_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":320
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))
 *       values_ = <double*> malloc(len(values) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_v_values_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":322
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_valueIndices_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_values_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":323
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 323, __pyx_L1_error)

    /* "PySolverInterface.pyx":322
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":325
 *          raise MemoryError()
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 325, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":326
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_valueIndices, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_valueIndices_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":327
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values_[i] = values[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 327, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":328
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.readBlockVectorData (dataID, size, valueIndices_, values_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_values_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":330
 *          values_[i] = values[i]
 * 
 *       self.thisptr.readBlockVectorData (dataID, size, valueIndices_, values_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_v_self->thisptr->readBlockVectorData(__pyx_t_6, __pyx_t_8, __pyx_v_valueIndices_, __pyx_v_values_);

  /* "PySolverInterface.pyx":332
 *       self.thisptr.readBlockVectorData (dataID, size, valueIndices_, values_)
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 332, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":333
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_valueIndices_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_valueIndices, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":334
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values[i] = values_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 334, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":335
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(valueIndices_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_values_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":337
 *          values[i] = values_[i]
 * 
 *       free(valueIndices_)             # <<<<<<<<<<<<<<
 *       free(values_)
 * 
 */
  free(__pyx_v_valueIndices_);

  /* "PySolverInterface.pyx":338
 * 
 *       free(valueIndices_)
 *       free(values_)             # <<<<<<<<<<<<<<
 * 
 *    def readVectorData (self, dataID, valueIndex, value):
 */
  free(__pyx_v_values_);

  /* "PySolverInterface.pyx":316
 *       self.thisptr.writeScalarData (dataID, valueIndex, value)
 * 
 *    def readBlockVectorData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readBlockVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":340
 *       free(values_)
 * 
 *    def readVectorData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_69readVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_69readVectorData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_valueIndex = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readVectorData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_valueIndex,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readVectorData", 1, 3, 3, 1); __PYX_ERR(0, 340, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readVectorData", 1, 3, 3, 2); __PYX_ERR(0, 340, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readVectorData") < 0)) __PYX_ERR(0, 340, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_valueIndex = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readVectorData", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 340, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_68readVectorData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_valueIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_68readVectorData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_valueIndex, PyObject *__pyx_v_value) {
  double *__pyx_v_value_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("readVectorData", 0);

  /* "PySolverInterface.pyx":342
 *    def readVectorData (self, dataID, valueIndex, value):
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if value_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_v_value_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":344
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 * 
 *       if value_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_value_ == NULL) != 0);
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":345
 * 
 *       if value_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(value)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 345, __pyx_L1_error)

    /* "PySolverInterface.pyx":344
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 * 
 *       if value_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":347
 *          raise MemoryError()
 * 
 *       for i in xrange(len(value)):             # <<<<<<<<<<<<<<
 *          value_[i] = value[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 347, __pyx_L1_error)
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PySolverInterface.pyx":348
 * 
 *       for i in xrange(len(value)):
 *          value_[i] = value[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.readVectorData (dataID, valueIndex, value_)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_value_[__pyx_v_i]) = __pyx_t_5;
  }

  /* "PySolverInterface.pyx":350
 *          value_[i] = value[i]
 * 
 *       self.thisptr.readVectorData (dataID, valueIndex, value_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(value)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_valueIndex); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_self->thisptr->readVectorData(__pyx_t_6, __pyx_t_7, __pyx_v_value_);

  /* "PySolverInterface.pyx":352
 *       self.thisptr.readVectorData (dataID, valueIndex, value_)
 * 
 *       for i in xrange(len(value)):             # <<<<<<<<<<<<<<
 *          value[i] = value_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 352, __pyx_L1_error)
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PySolverInterface.pyx":353
 * 
 *       for i in xrange(len(value)):
 *          value[i] = value_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(value_)
 */
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_value_[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_value, __pyx_v_i, __pyx_t_4, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "PySolverInterface.pyx":355
 *          value[i] = value_[i]
 * 
 *       free(value_)             # <<<<<<<<<<<<<<
 * 
 *    def readBlockScalarData (self, dataID, size, valueIndices, values):
 */
  free(__pyx_v_value_);

  /* "PySolverInterface.pyx":340
 *       free(values_)
 * 
 *    def readVectorData (self, dataID, valueIndex, value):             # <<<<<<<<<<<<<<
 *       cdef double* value_
 *       value_ = <double*> malloc(len(value) * sizeof(double))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readVectorData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":357
 *       free(value_)
 * 
 *    def readBlockScalarData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_71readBlockScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_71readBlockScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataID = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_valueIndices = 0;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readBlockScalarData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_size,&__pyx_n_s_valueIndices,&__pyx_n_s_values,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockScalarData", 1, 4, 4, 1); __PYX_ERR(0, 357, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockScalarData", 1, 4, 4, 2); __PYX_ERR(0, 357, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readBlockScalarData", 1, 4, 4, 3); __PYX_ERR(0, 357, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readBlockScalarData") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dataID = values[0];
    __pyx_v_size = values[1];
    __pyx_v_valueIndices = values[2];
    __pyx_v_values = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readBlockScalarData", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readBlockScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_70readBlockScalarData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_size, __pyx_v_valueIndices, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_70readBlockScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, PyObject *__pyx_v_dataID, PyObject *__pyx_v_size, PyObject *__pyx_v_valueIndices, PyObject *__pyx_v_values) {
  int *__pyx_v_valueIndices_;
  double *__pyx_v_values_;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("readBlockScalarData", 0);

  /* "PySolverInterface.pyx":360
 *       cdef int* valueIndices_
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))             # <<<<<<<<<<<<<<
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_v_valueIndices_ = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "PySolverInterface.pyx":361
 *       cdef double* values_
 *       valueIndices_ = <int*> malloc(len(valueIndices) * sizeof(int))
 *       values_ = <double*> malloc(len(values) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_v_values_ = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "PySolverInterface.pyx":363
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_valueIndices_ == NULL) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_values_ == NULL) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "PySolverInterface.pyx":364
 * 
 *       if valueIndices_ is NULL or values_ is NULL:
 *          raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 364, __pyx_L1_error)

    /* "PySolverInterface.pyx":363
 *       values_ = <double*> malloc(len(values) * sizeof(double))
 * 
 *       if valueIndices_ is NULL or values_ is NULL:             # <<<<<<<<<<<<<<
 *          raise MemoryError()
 * 
 */
  }

  /* "PySolverInterface.pyx":366
 *          raise MemoryError()
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 366, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":367
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_valueIndices, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_valueIndices_[__pyx_v_i]) = __pyx_t_6;
  }

  /* "PySolverInterface.pyx":368
 *       for i in xrange(len(valueIndices)):
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values_[i] = values[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 368, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":369
 *          valueIndices_[i] = valueIndices[i]
 *       for i in xrange(len(values)):
 *          values_[i] = values[i]             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.readBlockScalarData (dataID, size, valueIndices_, values_)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_values_[__pyx_v_i]) = __pyx_t_7;
  }

  /* "PySolverInterface.pyx":371
 *          values_[i] = values[i]
 * 
 *       self.thisptr.readBlockScalarData (dataID, size, valueIndices_, values_)             # <<<<<<<<<<<<<<
 * 
 *       for i in xrange(len(valueIndices)):
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_dataID); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
  __pyx_v_self->thisptr->readBlockScalarData(__pyx_t_6, __pyx_t_8, __pyx_v_valueIndices_, __pyx_v_values_);

  /* "PySolverInterface.pyx":373
 *       self.thisptr.readBlockScalarData (dataID, size, valueIndices_, values_)
 * 
 *       for i in xrange(len(valueIndices)):             # <<<<<<<<<<<<<<
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_valueIndices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 373, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":374
 * 
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]             # <<<<<<<<<<<<<<
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_valueIndices_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_valueIndices, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":375
 *       for i in xrange(len(valueIndices)):
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):             # <<<<<<<<<<<<<<
 *          values[i] = values_[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 375, __pyx_L1_error)
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PySolverInterface.pyx":376
 *          valueIndices[i] = valueIndices_[i]
 *       for i in xrange(len(values)):
 *          values[i] = values_[i]             # <<<<<<<<<<<<<<
 * 
 *       free(valueIndices_)
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_values_[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_values, __pyx_v_i, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PySolverInterface.pyx":378
 *          values[i] = values_[i]
 * 
 *       free(valueIndices_)             # <<<<<<<<<<<<<<
 *       free(values_)
 * 
 */
  free(__pyx_v_valueIndices_);

  /* "PySolverInterface.pyx":379
 * 
 *       free(valueIndices_)
 *       free(values_)             # <<<<<<<<<<<<<<
 * 
 *    def readScalarData (self, int dataID, int valueIndex, double& value):
 */
  free(__pyx_v_values_);

  /* "PySolverInterface.pyx":357
 *       free(value_)
 * 
 *    def readBlockScalarData (self, dataID, size, valueIndices, values):             # <<<<<<<<<<<<<<
 *       cdef int* valueIndices_
 *       cdef double* values_
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readBlockScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PySolverInterface.pyx":381
 *       free(values_)
 * 
 *    def readScalarData (self, int dataID, int valueIndex, double& value):             # <<<<<<<<<<<<<<
 *       self.thisptr.readScalarData (dataID, valueIndex, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_73readScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_73readScalarData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_dataID;
  int __pyx_v_valueIndex;
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readScalarData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataID,&__pyx_n_s_valueIndex,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dataID)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valueIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readScalarData", 1, 3, 3, 1); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readScalarData", 1, 3, 3, 2); __PYX_ERR(0, 381, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readScalarData") < 0)) __PYX_ERR(0, 381, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataID = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_dataID == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_valueIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_valueIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readScalarData", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.readScalarData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_72readScalarData(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), __pyx_v_dataID, __pyx_v_valueIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_72readScalarData(struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, int __pyx_v_dataID, int __pyx_v_valueIndex, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readScalarData", 0);

  /* "PySolverInterface.pyx":382
 * 
 *    def readScalarData (self, int dataID, int valueIndex, double& value):
 *       self.thisptr.readScalarData (dataID, valueIndex, value)             # <<<<<<<<<<<<<<
 * 
 * #   def getMeshHandle (self, meshName):
 */
  __pyx_v_self->thisptr->readScalarData(__pyx_v_dataID, __pyx_v_valueIndex, __pyx_v_value);

  /* "PySolverInterface.pyx":381
 *       free(values_)
 * 
 *    def readScalarData (self, int dataID, int valueIndex, double& value):             # <<<<<<<<<<<<<<
 *       self.thisptr.readScalarData (dataID, valueIndex, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_75__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_75__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_74__reduce_cython__(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_74__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_77__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_17PySolverInterface_17PySolverInterface_77__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_17PySolverInterface_17PySolverInterface_76__setstate_cython__(((struct __pyx_obj_17PySolverInterface_PySolverInterface *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_17PySolverInterface_17PySolverInterface_76__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_17PySolverInterface_PySolverInterface *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PySolverInterface.PySolverInterface.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "array.pxd":98
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":100
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":101
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":102
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "array.pxd":103
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "array.pxd":104
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":105
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":107
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (__pyx_t_6) {

    /* "array.pxd":109
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); __PYX_ERR(3, 109, __pyx_L1_error)

    /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  }

  /* "array.pxd":110
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 110, __pyx_L1_error)
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":111
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":113
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":114
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":115
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":116
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":119
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":134
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_3 = (__pyx_v_zero != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "array.pxd":136
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));

    /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  }

  /* "array.pxd":137
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":141
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":142
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":143
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":149
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":150
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":151
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 151, __pyx_L1_error)

  /* "array.pxd":152
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":153
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "array.pxd":158
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 158, __pyx_L1_error)

    /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  }

  /* "array.pxd":159
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 159, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":163
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_set_to_py_int(std::set<int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::set<int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__pyx_convert_set_to_py_int", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_set_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_17PySolverInterface_PySolverInterface(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_17PySolverInterface_17PySolverInterface_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_17PySolverInterface_PySolverInterface(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_17PySolverInterface_17PySolverInterface_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_17PySolverInterface_PySolverInterface[] = {
  {"configure", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_5configure, METH_O, 0},
  {"initialize", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_7initialize, METH_NOARGS, 0},
  {"initializeData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_9initializeData, METH_NOARGS, 0},
  {"advance", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_11advance, METH_O, 0},
  {"finalize", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_13finalize, METH_NOARGS, 0},
  {"getDimensions", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_15getDimensions, METH_NOARGS, 0},
  {"isCouplingOngoing", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_17isCouplingOngoing, METH_NOARGS, 0},
  {"isReadDataAvailable", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_19isReadDataAvailable, METH_NOARGS, 0},
  {"isWriteDataRequired", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_21isWriteDataRequired, METH_O, 0},
  {"isTimestepComplete", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_23isTimestepComplete, METH_NOARGS, 0},
  {"isActionRequired", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_25isActionRequired, METH_O, 0},
  {"fulfilledAction", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_27fulfilledAction, METH_O, 0},
  {"hasMesh", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_29hasMesh, METH_O, 0},
  {"getMeshID", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_31getMeshID, METH_O, 0},
  {"getMeshIDs", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_33getMeshIDs, METH_NOARGS, 0},
  {"hasData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_35hasData, METH_VARARGS|METH_KEYWORDS, 0},
  {"getDataID", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_37getDataID, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshVertices", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_39setMeshVertices, METH_VARARGS|METH_KEYWORDS, 0},
  {"getMeshVertexSize", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_41getMeshVertexSize, METH_O, 0},
  {"getMeshVertexIDsFromPositions", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_43getMeshVertexIDsFromPositions, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshEdge", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_45setMeshEdge, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshTriangle", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_47setMeshTriangle, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshTriangleWithEdges", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_49setMeshTriangleWithEdges, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshQuad", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_51setMeshQuad, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMeshQuadWithEdges", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_53setMeshQuadWithEdges, METH_VARARGS|METH_KEYWORDS, 0},
  {"mapReadDataTo", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_55mapReadDataTo, METH_O, 0},
  {"mapWriteDataFrom", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_57mapWriteDataFrom, METH_O, 0},
  {"writeBlockVectorData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_59writeBlockVectorData, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeVectorData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_61writeVectorData, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeBlockScalarData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_63writeBlockScalarData, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeScalarData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_65writeScalarData, METH_VARARGS|METH_KEYWORDS, 0},
  {"readBlockVectorData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_67readBlockVectorData, METH_VARARGS|METH_KEYWORDS, 0},
  {"readVectorData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_69readVectorData, METH_VARARGS|METH_KEYWORDS, 0},
  {"readBlockScalarData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_71readBlockScalarData, METH_VARARGS|METH_KEYWORDS, 0},
  {"readScalarData", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_73readScalarData, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_75__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_17PySolverInterface_17PySolverInterface_77__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_17PySolverInterface_PySolverInterface = {
  PyVarObject_HEAD_INIT(0, 0)
  "PySolverInterface.PySolverInterface", /*tp_name*/
  sizeof(struct __pyx_obj_17PySolverInterface_PySolverInterface), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_17PySolverInterface_PySolverInterface, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_17PySolverInterface_PySolverInterface, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_17PySolverInterface_PySolverInterface, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_PySolverInterface(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_PySolverInterface},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "PySolverInterface",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_PyActionPlotOutput, __pyx_k_PyActionPlotOutput, sizeof(__pyx_k_PyActionPlotOutput), 0, 0, 1, 1},
  {&__pyx_n_s_PyActionReadIterationCheckpoint, __pyx_k_PyActionReadIterationCheckpoint, sizeof(__pyx_k_PyActionReadIterationCheckpoint), 0, 0, 1, 1},
  {&__pyx_n_s_PyActionWriteInitialData, __pyx_k_PyActionWriteInitialData, sizeof(__pyx_k_PyActionWriteInitialData), 0, 0, 1, 1},
  {&__pyx_n_s_PyActionWriteIterationCheckpoint, __pyx_k_PyActionWriteIterationCheckpoint, sizeof(__pyx_k_PyActionWriteIterationCheckpoint), 0, 0, 1, 1},
  {&__pyx_kp_s_PyConstants_pyx, __pyx_k_PyConstants_pyx, sizeof(__pyx_k_PyConstants_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_PyDataDisplacements, __pyx_k_PyDataDisplacements, sizeof(__pyx_k_PyDataDisplacements), 0, 0, 1, 1},
  {&__pyx_n_s_PyDataForces, __pyx_k_PyDataForces, sizeof(__pyx_k_PyDataForces), 0, 0, 1, 1},
  {&__pyx_n_s_PyDataVelocities, __pyx_k_PyDataVelocities, sizeof(__pyx_k_PyDataVelocities), 0, 0, 1, 1},
  {&__pyx_n_s_PyExportAll, __pyx_k_PyExportAll, sizeof(__pyx_k_PyExportAll), 0, 0, 1, 1},
  {&__pyx_n_s_PyExportVRML, __pyx_k_PyExportVRML, sizeof(__pyx_k_PyExportVRML), 0, 0, 1, 1},
  {&__pyx_n_s_PyExportVTK, __pyx_k_PyExportVTK, sizeof(__pyx_k_PyExportVTK), 0, 0, 1, 1},
  {&__pyx_n_s_PyNameConfiguration, __pyx_k_PyNameConfiguration, sizeof(__pyx_k_PyNameConfiguration), 0, 0, 1, 1},
  {&__pyx_n_s_PySolverInterface, __pyx_k_PySolverInterface, sizeof(__pyx_k_PySolverInterface), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_dataID, __pyx_k_dataID, sizeof(__pyx_k_dataID), 0, 0, 1, 1},
  {&__pyx_n_s_dataName, __pyx_k_dataName, sizeof(__pyx_k_dataName), 0, 0, 1, 1},
  {&__pyx_n_s_firstEdgeID, __pyx_k_firstEdgeID, sizeof(__pyx_k_firstEdgeID), 0, 0, 1, 1},
  {&__pyx_n_s_firstVertexID, __pyx_k_firstVertexID, sizeof(__pyx_k_firstVertexID), 0, 0, 1, 1},
  {&__pyx_n_s_fourthEdgeID, __pyx_k_fourthEdgeID, sizeof(__pyx_k_fourthEdgeID), 0, 0, 1, 1},
  {&__pyx_n_s_fourthVertexID, __pyx_k_fourthVertexID, sizeof(__pyx_k_fourthVertexID), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_meshID, __pyx_k_meshID, sizeof(__pyx_k_meshID), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_positions, __pyx_k_positions, sizeof(__pyx_k_positions), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_secondEdgeID, __pyx_k_secondEdgeID, sizeof(__pyx_k_secondEdgeID), 0, 0, 1, 1},
  {&__pyx_n_s_secondVertexID, __pyx_k_secondVertexID, sizeof(__pyx_k_secondVertexID), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_solverName, __pyx_k_solverName, sizeof(__pyx_k_solverName), 0, 0, 1, 1},
  {&__pyx_n_s_solverProcessIndex, __pyx_k_solverProcessIndex, sizeof(__pyx_k_solverProcessIndex), 0, 0, 1, 1},
  {&__pyx_n_s_solverProcessSize, __pyx_k_solverProcessSize, sizeof(__pyx_k_solverProcessSize), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thirdEdgeID, __pyx_k_thirdEdgeID, sizeof(__pyx_k_thirdEdgeID), 0, 0, 1, 1},
  {&__pyx_n_s_thirdVertexID, __pyx_k_thirdVertexID, sizeof(__pyx_k_thirdVertexID), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_valueIndex, __pyx_k_valueIndex, sizeof(__pyx_k_valueIndex), 0, 0, 1, 1},
  {&__pyx_n_s_valueIndices, __pyx_k_valueIndices, sizeof(__pyx_k_valueIndices), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 182, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 184, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 184, __pyx_L1_error)
  #endif
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "PyConstants.pyx":44
 * #      del self.thisptr
 * 
 * def PyNameConfiguration ():             # <<<<<<<<<<<<<<
 *    return nameConfiguration()
 * 
 */
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyNameConfiguration, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(2, 44, __pyx_L1_error)

  /* "PyConstants.pyx":47
 *    return nameConfiguration()
 * 
 * def PyDataDisplacements ():             # <<<<<<<<<<<<<<
 *    return dataDisplacements()
 * 
 */
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyDataDisplacements, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(2, 47, __pyx_L1_error)

  /* "PyConstants.pyx":50
 *    return dataDisplacements()
 * 
 * def PyDataForces ():             # <<<<<<<<<<<<<<
 *    return dataForces()
 * 
 */
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyDataForces, 50, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(2, 50, __pyx_L1_error)

  /* "PyConstants.pyx":53
 *    return dataForces()
 * 
 * def PyDataVelocities ():             # <<<<<<<<<<<<<<
 *    return dataVelocities()
 * 
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyDataVelocities, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(2, 53, __pyx_L1_error)

  /* "PyConstants.pyx":56
 *    return dataVelocities()
 * 
 * def PyActionWriteInitialData ():             # <<<<<<<<<<<<<<
 *    return actionWriteInitialData()
 * 
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyActionWriteInitialData, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(2, 56, __pyx_L1_error)

  /* "PyConstants.pyx":59
 *    return actionWriteInitialData()
 * 
 * def PyActionWriteIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionWriteIterationCheckpoint()
 * 
 */
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyActionWriteIterationCheckpoint, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(2, 59, __pyx_L1_error)

  /* "PyConstants.pyx":62
 *    return actionWriteIterationCheckpoint()
 * 
 * def PyActionReadIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionReadIterationCheckpoint()
 * 
 */
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyActionReadIterationCheckpoint, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(2, 62, __pyx_L1_error)

  /* "PyConstants.pyx":65
 *    return actionReadIterationCheckpoint()
 * 
 * def PyActionPlotOutput ():             # <<<<<<<<<<<<<<
 *    return actionPlotOutput()
 * 
 */
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyActionPlotOutput, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(2, 65, __pyx_L1_error)

  /* "PyConstants.pyx":68
 *    return actionPlotOutput()
 * 
 * def PyExportVTK ():             # <<<<<<<<<<<<<<
 *    return exportVTK()
 * 
 */
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyExportVTK, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(2, 68, __pyx_L1_error)

  /* "PyConstants.pyx":71
 *    return exportVTK()
 * 
 * def PyExportVRML ():             # <<<<<<<<<<<<<<
 *    return exportVRML()
 * 
 */
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyExportVRML, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(2, 71, __pyx_L1_error)

  /* "PyConstants.pyx":74
 *    return exportVRML()
 * 
 * def PyExportAll ():             # <<<<<<<<<<<<<<
 *    return exportAll()
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyConstants_pyx, __pyx_n_s_PyExportAll, 74, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initPySolverInterface(void); /*proto*/
PyMODINIT_FUNC initPySolverInterface(void)
#else
PyMODINIT_FUNC PyInit_PySolverInterface(void); /*proto*/
PyMODINIT_FUNC PyInit_PySolverInterface(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_PySolverInterface(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_PySolverInterface(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("PySolverInterface", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PySolverInterface) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PySolverInterface")) {
      if (unlikely(PyDict_SetItemString(modules, "PySolverInterface", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_17PySolverInterface_PySolverInterface) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_type_17PySolverInterface_PySolverInterface.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PySolverInterface", (PyObject *)&__pyx_type_17PySolverInterface_PySolverInterface) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_17PySolverInterface_PySolverInterface) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_ptype_17PySolverInterface_PySolverInterface = &__pyx_type_17PySolverInterface_PySolverInterface;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(5, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(6, 15, __pyx_L1_error)
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) __PYX_ERR(3, 58, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "PyConstants.pyx":44
 * #      del self.thisptr
 * 
 * def PyNameConfiguration ():             # <<<<<<<<<<<<<<
 *    return nameConfiguration()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_1PyNameConfiguration, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyNameConfiguration, __pyx_t_1) < 0) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":47
 *    return nameConfiguration()
 * 
 * def PyDataDisplacements ():             # <<<<<<<<<<<<<<
 *    return dataDisplacements()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_3PyDataDisplacements, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyDataDisplacements, __pyx_t_1) < 0) __PYX_ERR(2, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":50
 *    return dataDisplacements()
 * 
 * def PyDataForces ():             # <<<<<<<<<<<<<<
 *    return dataForces()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_5PyDataForces, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyDataForces, __pyx_t_1) < 0) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":53
 *    return dataForces()
 * 
 * def PyDataVelocities ():             # <<<<<<<<<<<<<<
 *    return dataVelocities()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_7PyDataVelocities, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyDataVelocities, __pyx_t_1) < 0) __PYX_ERR(2, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":56
 *    return dataVelocities()
 * 
 * def PyActionWriteInitialData ():             # <<<<<<<<<<<<<<
 *    return actionWriteInitialData()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_9PyActionWriteInitialData, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyActionWriteInitialData, __pyx_t_1) < 0) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":59
 *    return actionWriteInitialData()
 * 
 * def PyActionWriteIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionWriteIterationCheckpoint()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_11PyActionWriteIterationCheckpoint, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyActionWriteIterationCheckpoint, __pyx_t_1) < 0) __PYX_ERR(2, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":62
 *    return actionWriteIterationCheckpoint()
 * 
 * def PyActionReadIterationCheckpoint ():             # <<<<<<<<<<<<<<
 *    return actionReadIterationCheckpoint()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_13PyActionReadIterationCheckpoint, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyActionReadIterationCheckpoint, __pyx_t_1) < 0) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":65
 *    return actionReadIterationCheckpoint()
 * 
 * def PyActionPlotOutput ():             # <<<<<<<<<<<<<<
 *    return actionPlotOutput()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_15PyActionPlotOutput, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyActionPlotOutput, __pyx_t_1) < 0) __PYX_ERR(2, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":68
 *    return actionPlotOutput()
 * 
 * def PyExportVTK ():             # <<<<<<<<<<<<<<
 *    return exportVTK()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_17PyExportVTK, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyExportVTK, __pyx_t_1) < 0) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":71
 *    return exportVTK()
 * 
 * def PyExportVRML ():             # <<<<<<<<<<<<<<
 *    return exportVRML()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_19PyExportVRML, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyExportVRML, __pyx_t_1) < 0) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyConstants.pyx":74
 *    return exportVRML()
 * 
 * def PyExportAll ():             # <<<<<<<<<<<<<<
 *    return exportAll()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_17PySolverInterface_21PyExportAll, NULL, __pyx_n_s_PySolverInterface); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyExportAll, __pyx_t_1) < 0) __PYX_ERR(2, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PySolverInterface.pyx":1
 * #import os             # <<<<<<<<<<<<<<
 * from cpython       cimport array
 * from libcpp        cimport bool
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PySolverInterface", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PySolverInterface");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
