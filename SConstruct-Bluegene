# preCICE/SConstruct

import os;
import sys;

##### Initialize build variables
#
cpppath = [ '#src' ]
cppdefines = [ 'tarch=tarchp2' ]
ccflags = [ '-fPIC' ]
libpath = []
libs = []
linkerflags = []
cxx = 'g++'

##### Determine boost root path from environment variable
#
boostRootPath = os.getenv ( 'BOOST_ROOT' )
if ( boostRootPath == None ):
   print 'ERROR: Environment variable BOOST_ROOT not defined!'
   sys.exit(1)
else:
   print 'Using environment variable BOOST_ROOT =', boostRootPath
   cpppath.append(boostRootPath)
   
##### Determine path to peano root from environment variable
#
tarchSrc = os.getenv ('TARCH_SRC')
if ( tarchSrc == None ):
   print 'ERROR: Environment variable TARCH_SRC not defined!'
   sys.exit(1)
else:
   print 'Using environment variable TARCH_SRC =', tarchSrc
   cpppath.append(tarchSrc)

##### Determine build directory
#
buildDir = ARGUMENTS.get('builddir', 'build')
buildpath = buildDir + '/'

##### Determine build mode
#
build = ARGUMENTS.get('build', 'debug')
if build == 'debug':
   cppdefines.append('Debug')
   cppdefines.append('Asserts')
   ccflags.append('-g3')
   ccflags.append('-O0')
   buildpath += "debug"
elif build == 'release':
   ccflags.append('-O3')
   buildpath += "release"    
else:
   print "ERROR: Argument 'build' must be either 'debug' or 'release'!"
   sys.exit(1)
   
   
##### Determine, which compiler should be used
#
cxx = ARGUMENTS.get('cxx', '')
useMPI = ARGUMENTS.get('mpi', 'on')
if cxx=='icc':
   libpath.append ('/usr/lib/')
   libs.append ('stdc++')
   #### mpich-libs
   #   if(useMPI == 'on'):
   #      cpppath.append('/usr/include/mpich2') 
   #      libpath.append('/usr/lib/')
   #      libs.append('mpich')
      
   if build == 'debug':
#      ccflags.append('-Weffc++')
      ccflags.append('-align')
      
   elif build == 'release':
      ccflags.append('-w')
#      ccflags.append('-vec-report') # Gibt aus wenn vectorisiert wurde
      ccflags.append('-align')
      ccflags.append('-fno-alias')
      ccflags.append('-inline-level=2')
      ccflags.append('-no-inline-max-size') 
      linkerflags.append('-align')
      linkerflags.append('-fno-alias')
      linkerflags.append('-inline-level=2')
      linkerflags.append('-no-inline-max-size') 
      print "Intel compiler (icc) used! "

elif cxx=='xlc':
  libpath.append('/usr/lib')
  libs.append('stdc++')
  if (useMPI == 'on'):
    cxx='mpixlcxx'
else: 
   cxx='g++'
   ccflags.append('-Wall')
   #ccflags.append('-Werror')
   #ccflags.append('-pedantic')
   #ccflags.append('-pedantic-errors')
   #ccflags.append('-Wnolonglong')

##### Determine, whether MPI should be used
#
if useMPI == 'on':
    cpppath.append('/usr/include/mpi')
    cpppath.append('/bgsys/drivers/ppcfloor/comm/include')
    libpath.append('/bgsys/drivers/ppcfloor/comm/lib')
    libs.append('mpich.cnk')
    libs.append('rt')
    libs.append('pthread')

    if cxx == 'xlc':
        cppdefines.append('__IBMCPlusPlusExceptionV3')
    if cxx == 'mpixlcxx':
        cppdefines.append('__IBMCPlusPlusExceptionV3')

elif useMPI == 'off':
   cppdefines.append ('PRECICE_NO_MPI')
   buildpath += "-nompi"
else:
   print "ERROR: Argument 'useMPI' must be either 'on' or 'off'!"
   sys.exit(1)

##### Determine whether Boost.Spirit 2.0 is available
#
hasSpirit2 = ARGUMENTS.get('spirit2', 'on')
if hasSpirit2 == 'on':
   pass
elif hasSpirit2 == 'off':
   cppdefines.append ('PRECICE_NO_SPIRIT2')
   buildpath += "-nospirit2"
else:
   print "ERROR: Argument 'spirit2' must be either 'on' or 'off'!"
   sys.exit(1)

##### Determine whether Python scripting extensions should be enabled
#
usePython = ARGUMENTS.get('python', 'on')
if usePython == 'on':
   libpath.append('/usr/lib/')   
   libs.append('python2.6')
   cpppath.append('/usr/include/python2.6/')
   cpppath.append('/usr/include/python2.6/numpy/') 
elif usePython == 'off':
   buildpath += "-nopython"
   cppdefines.append('PRECICE_NO_PYTHON')
else:
   print "ERROR: argument 'python' must be 'on' or 'off'!"
   sys.exit(1)

##### Determine use of profiling information
#
gprof = ARGUMENTS.get('gprof', 'off') # Read command line parameter
if gprof == 'off':
   pass
elif gprof == 'on':
   ccflags.append('-p')
   ccflags.append('-pg')
   linkerflags.append('-p')
   linkerflags.append('-pg')
   buildpath += "-gprof"
else:
   print "ERROR: Attribute 'gprof' must be = 'on' or 'off'!"
   sys.exit(1)
   
##### Determine activation of statistics computation
#
computeStatistics = ARGUMENTS.get('statistics', 'off')
if computeStatistics == 'off':
   pass
elif computeStatistics == 'on':
   cppdefines.append('PRECICE_STATISTICS')
   buildpath += "-stat"
else:
   print "ERROR: Attribute 'statistics' must be = 'on' or 'off'!"
   sys.exit(1)

##### Determine targets
#
#buildBin = False
#buildLib = False
#target = ARGUMENTS.get('target', 'all')
#if target == 'bin':
#   buildBin = True   
#elif target == 'lib':
#   buildLib = True
#elif target == 'all':
#   buildBin = True
#   buildLib = True
#else:
#   print "ERROR: target must be = 'bin'(default), 'lib' or 'all'"
#   sys.exit(1)

##### Determine build path
#
#buildDir = ARGUMENTS.get('builddir', 'build')
buildpathTarch = buildDir + '/tarch/' + build
#buildpath = buildDir + '/' + build + buildpathParallel + buildpathPython

#libpath.append ('#' + buildpathTarch)
libpath.append ('#' + buildpath)

##### Print build summary
#
print
print "Build summary:"
print "  Options:   builddir   = " + str(buildDir)
print "             compiler   = " + cxx
print "             build      = " + str(build)
print "             mpi        = " + useMPI
print "             python     = " + usePython 
print "             spirit2    = " + hasSpirit2
print "             gprof      = " + gprof
print "             statistics = " + computeStatistics
print

print "  Buildpath: " + buildpath
print "  Buildpath tarch: " + buildpathTarch
print

##### Setup construction environment
#
env = Environment ( 
   CPPDEFINES = cppdefines, # defines for preprocessor (#define xyz)
   LIBPATH    = libpath,    # path to libraries used
   LIBS       = libs,       # libraries used (without prefix "lib" and suffix ".a"/".so"/...)
   CPPPATH    = cpppath,    # pathes where the preprocessor should look for files
   CCFLAGS    = ccflags,    # flags for the c/c++ compilers
   LINKFLAGS  = linkerflags,# flags given to the linker
   CXX        = cxx,        # the c++ compiler that should be used
   ENV        = os.environ  # propagates environment variables to scons  
   )
    
(sourcesTarch, dummy) = SConscript (
   tarchSrc + '/tarch/SConscript',
   variant_dir = buildpathTarch, 
   duplicate   = 0
   )

sourcesPreCICE = SConscript (
   'src/SConscript-linux', 
   variant_dir = buildpath, 
   duplicate   = 0
   )
   
print "Copy boost sources to build ..."
if not os.path.exists(buildpath + "/boost/"):
   Execute(Mkdir(buildpath + "/boost/"))
for file in Glob(boostRootPath + "/libs/system/src/*"):
   Execute(Copy(buildpath + "/boost/", file))    
sourcesBoost = Glob(buildpath + '/boost/*.cpp')

env.StaticLibrary (
   target = buildpath + '/libprecice',
   source = [ 
      sourcesTarch, 
      sourcesPreCICE,
      sourcesBoost # Boost system library cpps
      ]
   )
   
env.Program ( 
   target = buildpath + '/precicerun',
   source = [ 
      sourcesTarch, 
      sourcesPreCICE, 
      sourcesBoost
      ]
   )
