#ifndef FSI_FSIDUMMYBIMPLEMENTATION_H_
#define FSI_FSIDUMMYBIMPLEMENTATION_H_ 

//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//

#include "fsi/FSIDummyBAbstractImplementation.h"
#include "fsi/FSIDummyCommunicator.h"
#include <string>
#include <hash_map>
#include <pthread.h>
namespace fsi { 

class FSIDummyBImplementation;

}

class fsi::FSIDummyBImplementation : public fsi::FSIDummyBAbstractImplementation{
private:
	pthread_mutex_t _mutex;
	int _pointsSize;
	bool _initialized;
	int* _localIds;
	double* _data;
	__gnu_cxx::hash_map<int,fsi::FSIDummyCommunicator*> _comms;
	const int getHostId(
			const int pointId,
			const int* offsets,
			const int offset_len) const;
	fsi::FSIDummyCommunicator* getCommunicator(
			const int commId,const std::string commid);

	//	double* _localCoordinatesX;
	//	double* _localCoordinatesY;

public:
	static FSIDummyBImplementation* singleton;

	FSIDummyBImplementation();
	~FSIDummyBImplementation();
	void setCoordinates(
			int* localIds,
			//double* coordinatesX,
			//double* coordinatesY,
			const int pointsSize);
	void setData(double* data);
	void transferCoordinates(
			const int* coordIds,
			const int coord_len,
			const int* offsets,
			const int offsets_len,
			const std::string* commids,
			const int commids_len
	);
	void flush();
	void dataAck(int& ack){

	}
	void transferData(
			const int* coordIds, const int coordIds_len,
			const double* data, const int data_len);
	void startDataTransfer();
	void endDataTransfer(int& ack);
};     


#endif
