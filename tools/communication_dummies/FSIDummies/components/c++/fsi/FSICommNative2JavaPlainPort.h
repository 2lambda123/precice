#ifndef FSI_FSICOMM2NATIVE2JAVAPLAINPORT_H_
#define FSI_FSICOMM2NATIVE2JAVAPLAINPORT_H_ 

#include "fsi/FSIComm.h"
#include <jni.h> 
#include <iostream>
//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
#ifdef __cplusplus
  extern "C" {
#endif


          
JNIEXPORT void JNICALL Java_fsi_FSICommNative2JavaPlainPort_createInstance(JNIEnv *env, jobject obj);
JNIEXPORT void JNICALL Java_fsi_FSICommNative2JavaPlainPort_destroyInstance(JNIEnv *env, jobject obj,jlong ref);

#ifdef __cplusplus
  }
#endif




namespace fsi { 

     class FSICommNative2JavaPlainPort;
}

class fsi::FSICommNative2JavaPlainPort: public fsi::FSIComm{
  private:
    JavaVM* _jvm;
    jobject _obj;
  public:
    FSICommNative2JavaPlainPort(JavaVM* jvm,jobject obj);
    ~FSICommNative2JavaPlainPort();
    void transferCoordinates(const int* coordId, const int coordId_len,const int* offsets, const int offsets_len,const std::string* hosts, const int hosts_len);  
    void transferCoordinatesParallel(const int* coordId, const int coordId_len,const int* offsets, const int offsets_len,const std::string* hosts, const int hosts_len);
   
    void startDataTransfer();  
    void startDataTransferParallel();
   
    void endDataTransfer(int& ack);  
    void endDataTransferParallel(int& ack);
   
};
#endif
