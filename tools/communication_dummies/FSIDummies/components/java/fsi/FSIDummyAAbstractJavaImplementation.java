//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package fsi;


public abstract class FSIDummyAAbstractJavaImplementation extends SocketComponent implements FSIDummyA{
  protected de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab _appTab;
  protected String   _instanceName;
  protected String _projectLocation;
  public FSIDummyAAbstractJavaImplementation( String instanceName ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    _instanceName = instanceName;
    _appTab = new de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab("fsi.FSIDummyA",this, de.tum.ascodt.plugin.ui.views.AppsViewContainer.ID);
    _appTab.setVisible(true);
    _appTab.addListener(this);
    
    
  }
  
  public de.tum.ascodt.repository.Target getTarget() {
     return de.tum.ascodt.repository.Target.createCxxRemoteSocketTarget();
  }
  
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
     return de.tum.ascodt.repository.TargetParameters.createRemoteSocketParameters(
          _appTab.getHost(),
          _appTab.getPort()
          );
  }

  public long getReference(){
    return 0;
  }  
  
  public void setReference(long ref){
   
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

  public void setProjectLocation(String location){
     _projectLocation = location;
     _appTab.setProjectLocation(location);
     if(_appTab.hasApplicationSettings())
          _appTab.execute();
  }
 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
    
  }
  
 
  public void destroy()  {
          try{
               if(isConnected())
                    sendIntData(1);
          }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
               de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
          }
          super.close();
          _appTab.removeListener(this);
          _appTab.setVisible(false);
          _appTab.dispose();
    
  }
  
  public boolean isValid() {
     return true;
  }


  public boolean hasGUI() {
    // @todo Insert your code here
    return false;
  }
  
  
  public void openGUI() {
    // @todo Insert your code here
  }
  
  
  public void closeGUI() {
    // @todo Insert your code here
  }
  
  @Override
  public String getInstanceName() {
    return _instanceName;
  }

  @Override
  public void setInstanceName(String instanceName) {
    _instanceName=instanceName;
  }
  
  public void createInstance(){
     
  }
 
  public void destroyInstance(){
  }
 
  

  public void transferData(final int coordId[],final double data[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=14;
         sendIntData(methodId);
         sendIntData(coordId.length);
sendIntData(coordId);
sendIntData(data.length);
sendDoubleData(data);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }

  public void transferDataParallel(final int coordId[],final double data[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=14+1;
         sendIntData(methodId);
         sendIntData(coordId.length);
sendIntData(coordId);
sendIntData(data.length);
sendDoubleData(data);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }
    

  public void dataAck(int ack[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=16;
         sendIntData(methodId);
         sendIntData(ack);

         readIntData(ack,1);
  
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }

  public void dataAckParallel(int ack[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=16+1;
         sendIntData(methodId);
         sendIntData(ack);

         readIntData(ack,1);
  
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }
    

  /**
   * Uses port
   */
  protected fsi.FSICommSocketDispatcher _b = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public fsi.FSIComm createPortForb(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    fsi.FSICommSocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranNative
    ) {
      result = new fsi.FSICommSocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.FortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.CxxRemoteSocket
    ){
          result = new fsi.FSICommSocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForb(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForb(fsi.FSICommSocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=2;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println("Create");
     ref=readLongData();
     de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println("Created: " + ref);
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectb(final fsi.FSIComm  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_b==null){
       
        _b = new fsi.FSICommSocketDispatcher();
        _appTab.addListener(_b);
        long dispRef = connectClientDispatcherb(_b.getHost(),_b.getPort());
        _b.setReference(dispRef);
     }
     _b.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherb(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=3;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _b.open();
     ref=readLongData();
     de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println("Connected: " + ref);
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectb(final fsi.FSIComm  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_b!=null&&_b.isConnected()){
               assert(_b!=null );
               _appTab.removeListener(( fsi.FSICommSocketPort)port);
               _b.disconnect(port);
               if(!_b.isConnected()){
                 _appTab.removeListener(_b);
                 disconnectDispatcherb();
                 _b.close();
                 _b = null;
               }
    }
  }
  
  public void disconnectDispatcherb() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=4;
     sendIntData(methodId);
     
  }
  
  


}
 


