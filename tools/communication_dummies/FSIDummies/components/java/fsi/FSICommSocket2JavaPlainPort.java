//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package fsi;


public class FSICommSocket2JavaPlainPort extends FSICommAbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  interface FSICommSocketInvoker {
    void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException;
  } 
  private long _ref;
  private FSICommSocketInvoker[] _invokers;
  private java.util.concurrent.ExecutorService _executor;
  public FSICommSocket2JavaPlainPort(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super(host,port);
    _invokers = new  FSICommSocketInvoker[29];
    	_invokers[5]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_transferCoordinates();
		}
	};
	_invokers[6]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_transferCoordinatesParallel();
		}
	};
	_invokers[7]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_startDataTransfer();
		}
	};
	_invokers[8]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_startDataTransferParallel();
		}
	};
	_invokers[9]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_endDataTransfer();
		}
	};
	_invokers[10]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_endDataTransferParallel();
		}
	};

  }
  
  public FSICommSocket2JavaPlainPort() throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super();
    _invokers = new  FSICommSocketInvoker[29];
    	_invokers[5]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_transferCoordinates();
		}
	};
	_invokers[6]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_transferCoordinatesParallel();
		}
	};
	_invokers[7]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_startDataTransfer();
		}
	};
	_invokers[8]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_startDataTransferParallel();
		}
	};
	_invokers[9]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_endDataTransfer();
		}
	};
	_invokers[10]= new FSICommSocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_endDataTransferParallel();
		}
	};

  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    _executor=java.util.concurrent.Executors.newSingleThreadExecutor();
    _executor.execute(this);           
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=0;
     sendIntData(methodId);
     _ref=readLongData();
    
  }
  public void destroyInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=1;
     sendIntData(methodId);
     sendLongData(_ref);
          
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(FSIComm  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void close(){
     if(_executor!=null&&!_executor.isShutdown())
          _executor.shutdownNow();
     super.close();
  }
  public void run(){
     int methodId=0;
     try{
          methodId=readIntData(); 
          while(methodId!=-1){
             
              _invokers[methodId].invoke();
              methodId=readIntData();      
          }
         
     }catch(Exception e){
          de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
     }
     super.close();
  }

  public void invoke_endDataTransfer() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int [] ack= new int[1];
readIntData(ack,1);

     endDataTransfer(ack);
     sendIntData(ack);

  }
  public void invoke_endDataTransferParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void endDataTransfer(int ack[]) {
     _destination.endDataTransfer(ack);
  }
  public void endDataTransferParallel(int ack[]) {
     _destination.endDataTransferParallel(ack);
  }
  
  

  public void invoke_startDataTransfer() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     
     startDataTransfer();
     
  }
  public void invoke_startDataTransferParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void startDataTransfer() {
     _destination.startDataTransfer();
  }
  public void startDataTransferParallel() {
     _destination.startDataTransferParallel();
  }
  
  

  public void invoke_transferCoordinates() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int coordId_len=readIntData();
int []coordId=new int[coordId_len];
readIntData(coordId,coordId_len);
int offsets_len=readIntData();
int []offsets=new int[offsets_len];
readIntData(offsets,offsets_len);
int hosts_len=readIntData();
String []hosts=new String[hosts_len];
readStringData(hosts,hosts_len);

     transferCoordinates(coordId,offsets,hosts);
     
  }
  public void invoke_transferCoordinatesParallel() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
    
  }
  public void transferCoordinates(final int coordId[],final int offsets[],final String hosts[]) {
     _destination.transferCoordinates(coordId,offsets,hosts);
  }
  public void transferCoordinatesParallel(final int coordId[],final int offsets[],final String hosts[]) {
     _destination.transferCoordinatesParallel(coordId,offsets,hosts);
  }
  
  


}
 


