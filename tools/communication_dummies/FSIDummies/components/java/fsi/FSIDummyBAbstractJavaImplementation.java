//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package fsi;


public abstract class FSIDummyBAbstractJavaImplementation extends SocketComponent implements FSIDummyB{
  protected de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab _appTab;
  protected String   _instanceName;
  protected String _projectLocation;
  public FSIDummyBAbstractJavaImplementation( String instanceName ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    _instanceName = instanceName;
    _appTab = new de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab("fsi.FSIDummyB",this, de.tum.ascodt.plugin.ui.views.AppsViewContainer.ID);
    _appTab.setVisible(true);
    _appTab.addListener(this);
    
    
  }
  
  public de.tum.ascodt.repository.Target getTarget() {
     return de.tum.ascodt.repository.Target.createCxxRemoteSocketTarget();
  }
  
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
     return de.tum.ascodt.repository.TargetParameters.createRemoteSocketParameters(
          _appTab.getHost(),
          _appTab.getPort()
          );
  }

  public long getReference(){
    return 0;
  }  
  
  public void setReference(long ref){
   
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

  public void setProjectLocation(String location){
     _projectLocation = location;
     _appTab.setProjectLocation(location);
     if(_appTab.hasApplicationSettings())
          _appTab.execute();
  }
 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
    
  }
  
 
  public void destroy()  {
          try{
               if(isConnected())
                    sendIntData(1);
          }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
               de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
          }
          super.close();
          _appTab.removeListener(this);
          _appTab.setVisible(false);
          _appTab.dispose();
    
  }
  
  public boolean isValid() {
     return true;
  }


  public boolean hasGUI() {
    // @todo Insert your code here
    return false;
  }
  
  
  public void openGUI() {
    // @todo Insert your code here
  }
  
  
  public void closeGUI() {
    // @todo Insert your code here
  }
  
  @Override
  public String getInstanceName() {
    return _instanceName;
  }

  @Override
  public void setInstanceName(String instanceName) {
    _instanceName=instanceName;
  }
  
  public void createInstance(){
     
  }
 
  public void destroyInstance(){
  }
 
  

  public void transferCoordinates(final int coordId[],final int offsets[],final String hosts[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=5;
         sendIntData(methodId);
         sendIntData(coordId.length);
sendIntData(coordId);
sendIntData(offsets.length);
sendIntData(offsets);
sendIntData(hosts.length);
sendStringData(hosts);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }

  public void transferCoordinatesParallel(final int coordId[],final int offsets[],final String hosts[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=5+1;
         sendIntData(methodId);
         sendIntData(coordId.length);
sendIntData(coordId);
sendIntData(offsets.length);
sendIntData(offsets);
sendIntData(hosts.length);
sendStringData(hosts);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }
    

  public void transferData(final double data[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=7;
         sendIntData(methodId);
         sendIntData(data.length);
sendDoubleData(data);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }

  public void transferDataParallel(final double data[]) {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=7+1;
         sendIntData(methodId);
         sendIntData(data.length);
sendDoubleData(data);

           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().println(e);
    }  
  }
    


}
 


