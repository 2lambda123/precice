"""
Parses the format that is generated by the EventTimings framework. Sample input:

# Run finished at Tue Nov 10 15:49:40 2015
# Number of processors: 6
# Eventname Count Total Max Min Avg T%
# Property Iterations: 120
# Property MPI_Calls: 130
"GLOBAL" 1 2658 2658 2658 2658 100
"M2N::acceptMasterConnection" 1 6 6 6 6 0
"advance" 1 0 0 0 0 0
"initialize" 1 2512 2512 2512 2512 94
"receive global mesh" 1 43 43 43 43 1
"send global mesh" 1 0 0 0 0 0

# Run finished at Tue Nov 10 15:52:40 2015
# Number of processors: 6
# Eventname Count Total Max Min Avg T%
"GLOBAL" 1 2666 2666 2666 2666 100
"M2N::requestMasterConnection" 1 12 12 12 12 0
"M2N::requestMasterConnection/Publisher::read" 1 0 0 0 0 0
"advance" 1 2474 2474 2474 2474 92
"initialize" 1 43 43 43 43 1
"receive global mesh" 1 8 8 8 8 0
"send global mesh" 1 0 0 0 0 0

This is converted to a data structure:

[
   {
       "timestamp"  : "Time of the run, a python datatime object"
       "procs"      : "Number of processors"
       "global"     : "Global timings, a numpy array"
       "properties" : "dict of property -> value"
       "timings"    : {"Event Name" : "numpy.array with custom datatype" }
   }
]
"""

import locale, shlex, datetime
import numpy as np

datatype = [ ("count", int),
             ("total", int),
             ("max", int),
             ("min", int),
             ("avg", int),
             ("percent", int)
]


def readBlock(f):
    """ Generator that returns one block at a time, each line as list item. """
    lines = []
    with open(f, "r") as f:
        for line in f:
            l = line.strip()
            if l == "" and len(lines) > 2:
                yield lines
                lines = []
            elif l != "":
                lines.append(l)
        if len(lines):
            yield lines
            
    raise StopIteration()

    
def parseTimings(tStr):
    """ Returns event name and timings as a dict. """
    s = shlex.split(tStr)
    return s[0], np.array(tuple(s[1:]), dtype=datatype)
    

def parseEventlog(file):
    """ Takes a filename, parses the Eventlog and returns the data. """
    locale.setlocale(locale.LC_TIME, "C") # Set the locale, so that strptime works as intended.

    events = []

    for block in readBlock(file):
        timeStamp = datetime.datetime.strptime(block[0][19:], "%a %b %d %H:%M:%S %Y")
        procs = int(block[1][24:])
        properties = {}
        i = 2
        while block[i].startswith("# Property "):
            evStr = block[i][11:]
            properties[evStr.split(":")[0]] = float(evStr.split(":")[1])
            i += 1

        timings = {}
        for i in block[i+1:]:
            timing = parseTimings(i)
            timings[timing[0]] = timing[1]
        
        events.append( {
            "timestamp"  : timeStamp,
            "procs"      : procs,
            "properties" : properties,
            "timings"    : timings
        } )

    return events
    
