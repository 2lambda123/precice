# preCICE/SConstruct

import os;
import sys;

##### Initialize build variables
#
cpppath = [ '#src' ]
cppdefines = [ 
   '_WIN32_WINDOWS', 
   'BOOST_THREAD_USE_LIB' 
   ]
ccflags = [ '-Wall' ]
libpath = []
libs = [ 
   'ws2_32', 
   'boost_thread-mgw44-mt-d-1_46_1',
   'boost_system-mgw44-mt-d-1_46_1'
   ]
linkerflags = []
cxx = 'g++'
compiler_tools = [ 'mingw' ]

##### Determine boost root path from environment variable
#
boostRootPath = os.getenv ( 'BOOST_ROOT' )
if ( boostRootPath == None ):
   print 'ERROR: Environment variable BOOST_ROOT not defined!'
   sys.exit(1)
else:
   print 'Using environment variable BOOST_ROOT =', boostRootPath
   cpppath.append(boostRootPath)
   
libpath.append(boostRootPath + '/bin.v2/libs/thread/build/gcc-mingw-4.4.0/debug/link-static/threading-multi/')
libpath.append(boostRootPath + '/bin.v2/libs/system/build/gcc-mingw-4.4.0/debug/link-static/threading-multi/') 
   
##### Determine path to peano root from environment variable
#
tarchSrc = os.getenv ('TARCH_SRC')
if ( (tarchSrc == None) or (tarchSrc == "")):
   print 'Environment variable TARCH_SRC not defined or empty, assuming tarch included in precice src directory!'
   tarchSrc = './src/'
else:
   print 'Using environment variable TARCH_SRC =', tarchSrc
   cpppath.append(tarchSrc)

##### Determine build directory
#
buildDir = ARGUMENTS.get('builddir', 'build')
buildpath = buildDir + '/'

##### Determine build mode
#
build = ARGUMENTS.get('build', 'debug')
if build == 'debug':
   cppdefines.append('Debug')
   cppdefines.append('Asserts')
   ccflags.append('-g3')
   ccflags.append('-O0')
   buildpath += "debug"
elif build == 'release':
   ccflags.append('-O3')
   buildpath += "release"    
else:
   print "ERROR: Argument 'build' must be either 'debug' or 'release'!"
   sys.exit(1)

##### Determine, whether MPI should be used
#
useMPI = ARGUMENTS.get('mpi', 'on')
if useMPI == 'on':
   cpppath.append ('C:\Program Files (x86)\MPICH2\include')
   libpath.append ('C:\Program Files (x86)\MPICH2\lib')
   libs.append ('mpi')  # For systems without mpicxx compiler
   #cxx = 'mpicxx'      # For systems offering mpicxx compiler
elif useMPI == 'off':
   cppdefines.append ('PRECICE_NO_MPI')
   buildpath += "-nompi"
else:
   print "ERROR: Argument 'mpi' must be either 'on' or 'off'!"
   sys.exit(1)
   
##### Determine whether Boost.Spirit 2.0 is available
#
hasSpirit2 = ARGUMENTS.get('spirit2', 'on')
if hasSpirit2 == 'on':
   pass
elif hasSpirit2 == 'off':
   cppdefines.append ('PRECICE_NO_SPIRIT2')
   buildpath += "-nospirit2"
else:
   print "ERROR: Argument 'spirit2' must be either 'on' or 'off'!"
   sys.exit(1)
   
##### Determine whether Python scripting extensions should be enabled
#
usePython = ARGUMENTS.get('python', 'on')
if usePython == 'on':
   libpath.append('/Python26/libs/')   
   libs.append('python26')
   cpppath.append('/Python26/include/')
   cpppath.append('/Python26/Lib/site-packages/numpy/core/include/numpy') 
elif usePython == 'off':
   buildpath += "-nopython"
   cppdefines.append('PRECICE_NO_PYTHON')
else:
   print "ERROR: argument 'python' must be 'on' or 'off'!"
   sys.exit(1)
   
##### Determine use of profiling information
#
gprof = ARGUMENTS.get('gprof', 'off') # Read command line parameter
if gprof == 'off':
   pass
elif gprof == 'on':
   ccflags.append('-p')
   ccflags.append('-pg')
   linkerflags.append('-p')
   linkerflags.append('-pg')
   buildpath += "-gprof"
else:
   print "ERROR: Attribute 'gprof' must be = 'on' or 'off'!"
   sys.exit(1)
   
##### Determine activation of statistics computation
#
computeStatistics = ARGUMENTS.get('statistics', 'off')
if computeStatistics == 'off':
   pass
elif computeStatistics == 'on':
   cppdefines.append('PRECICE_STATISTICS')
   buildpath += "-stat"
else:
   print "ERROR: Attribute 'statistics' must be = 'on' or 'off'!"
   sys.exit(1)

##### Determine targets
#
#buildBin = False
#buildLib = False
#target = ARGUMENTS.get('target', 'all')
#if target == 'bin':
#   buildBin = True   
#elif target == 'lib':
#   buildLib = True
#elif target == 'all':
#   buildBin = True
#   buildLib = True
#else:
#   print "ERROR: target must be = 'bin'(default), 'lib' or 'all'"
#   sys.exit(1)

##### Determine build path
#
#buildDir = ARGUMENTS.get('builddir', 'build')
buildpathTarch = buildDir + '/tarch/' + build
#buildpath = buildDir + '/' + build + buildpathParallel + buildpathPython

#libpath.append ('#' + buildpathTarch)
libpath.append ('#' + buildpath)
   
##### Print build summary
#
print
print "Build summary:"
print "  Options:   builddir   = " + str(buildDir)
print "             build      = " + str(build)
print "             mpi        = " + useMPI
print "             python     = " + usePython 
print "             spirit2    = " + hasSpirit2
print "             gprof      = " + gprof
print "             statistics = " + computeStatistics
print
                    
print "  Buildpath: " + buildpath
print "  Buildpath tarch: " + buildpathTarch
print

##### Setup construction environment
#
env = Environment ( 
   CPPDEFINES = cppdefines, # defines for preprocessor (#define xyz)
   LIBPATH    = libpath,    # path to libraries used
   LIBS       = libs,       # libraries used (without prefix "lib" and suffix ".a"/".so"/...)
   CPPPATH    = cpppath,    # pathes where the preprocessor should look for files
   CCFLAGS    = ccflags,    # flags for the c/c++ compilers
   LINKFLAGS  = linkerflags,# flags given to the linker
   CXX        = cxx,        # the c++ compiler that should be used
   ENV        = os.environ, # propagates environment variables to scons
   tools      = compiler_tools    
   )

(sourcesTarch) = SConscript (
   tarchSrc + '/tarch/SConscript-preCICE',
   variant_dir = buildpathTarch, 
   duplicate   = 0
   )

sourcesPreCICE1 = SConscript (
   'src/SConscript-windows-1', 
   variant_dir = buildpath, 
   duplicate   = 0
   )
   
sourcesPreCICE2 = SConscript (
   'src/SConscript-windows-2', 
   variant_dir = buildpath, 
   duplicate   = 0
   )

#print "Copy boost sources to build ..."
#if not os.path.exists(buildpath + "/boost/"):
#   Execute(Mkdir(buildpath + "/boost/"))
#for file in Glob(boostRootPath + "/libs/system/src/*"):
#   Execute(Copy(buildpath + "/boost/", file))    
#sourcesBoost = Glob(buildpath + '/boost/*.cpp')
#  
#env.StaticLibrary (
#   target = buildpath + '/libboost',
#   source = [ sourcesBoost ]
#   )
  
env.StaticLibrary (
   target = buildpath + '/libtarch',
   source = [ sourcesTarch ]
   )
   
env.StaticLibrary (
   target = buildpath + '/libprecice1',
   source = [ sourcesPreCICE1 ]
   )
   
env.StaticLibrary (
   target = buildpath + '/libprecice2',
   source = [ sourcesPreCICE2 ]
   )

env.Prepend ( LIBLINKPREFIX = '-Wl,-whole-archive,' )
env.Append ( LIBLINKSUFFIX = ',-no-whole-archive' )
env.Prepend ( LIBS = [ 'precice2', 'precice1', 'tarch' ] )
env.Program ( 
   target  = buildpath + '/precicerun',
   source  = [ buildpath + '/drivers/main.cpp' ]
   #LIBS    = [ 'tarch', 'precice1', 'precice2', 'precice1' ]
   )